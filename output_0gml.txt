function infix_to_postfix(tokens) {
    show_debug_message("Converting to postfix: " + string(tokens));

    var output = [];
    var stack  = [];

    // Local helper: safe uppercase
    var _TOKU = function(_t) { return string_upper(string(_t)); };

    // Local helper: append array contents to another array
    var _push_all = function(_dst, _src) {
        for (var __i = 0; __i < array_length(_src); __i++) {
            array_push(_dst, _src[__i]);
        }
    };

    for (var i = 0; i < array_length(tokens); i++) {
        var t  = tokens[i];        // raw token
        // Ignore commas as separators — functions handle arg order explicitly
        if (t == ",") {
            show_debug_message("INFIX: Skipping comma token");
            continue;
        }

        var tu = _TOKU(t);         // uppercased string form

        // ==========================================================
        // 1) ARRAY READ COLLAPSE — NAME ( balanced stuff )  →  "NAME(...)"
        //    (skip if NAME is a known function)
        // ==========================================================
        if (is_string(t)) {
            var first = string_char_at(t, 1);
            var can_be_name = is_letter(first);

            if (can_be_name
            &&  i + 1 < array_length(tokens)
            &&  tokens[i + 1] == "("
            && !is_function(t)) // do not collapse functions
            {
                var _depth   = 0;
                var j       = i + 1;
                var inner   = "";
                var matched = false;

                show_debug_message("INFIX: Candidate for array collapse → '" + string(t) + "' followed by '('");

                while (j < array_length(tokens)) {
                    var tk = tokens[j];
                    if (tk == "(") {
                        _depth++;
                        if (_depth > 1) inner += tk;
                    } else if (tk == ")") {
                        _depth--;
                        if (_depth == 0) { matched = true; break; }
                        inner += tk;
                    } else {
                        inner += tk;
                    }
                    j++;
                }

                if (matched) {
                    var collapsed = string(t) + "(" + inner + ")";
                    array_push(output, collapsed);
                    show_debug_message("INFIX: Collapsed array read token → '" + collapsed + "' (consumed through index " + string(j) + ")");
                    i = j; // skip to ')'
                    continue;
                } else {
                    show_debug_message("INFIX: WARNING — unmatched '(' after '" + string(t) + "'. Not collapsing.");
                }
            }
        }

        // ==========================================================
        // 2) NUMERIC LITERAL
        // ==========================================================
        if (is_numeric_string(t)) {
            array_push(output, t);
            show_debug_message("Added number to output: " + string(t));
            continue;
        }

        // ==========================================================
        // 3) KNOWN VARIABLE (already in global.basic_variables)
        // ==========================================================
        if (ds_map_exists(global.basic_variables, tu)) {
            array_push(output, tu);
            show_debug_message("Added variable name to output: " + tu);
            continue;
        }

        // ==========================================================
        // 4) OPEN PAREN
        // ==========================================================
        if (t == "(") {
            array_push(stack, t);
            show_debug_message("Pushed '(' onto operator stack");
            continue;
        }

        // ==========================================================
        // 5) CLOSE PAREN
        // ==========================================================
        if (t == ")") {
            while (array_length(stack) > 0 && stack[array_length(stack) - 1] != "(") {
                var popped_close = array_pop(stack);
                array_push(output, popped_close);
                show_debug_message("Popped '" + string(popped_close) + "' from stack to output (closing ')')");
            }
            if (array_length(stack) > 0 && stack[array_length(stack) - 1] == "(") {
                array_pop(stack); // discard '('
                show_debug_message("Discarded matching '(' from stack");
            } else {
                show_debug_message("INFIX: WARNING — stray ')' with no matching '('");
            }
            continue;
        }

        // ==========================================================
        // 6) OPERATORS (+ - * / % MOD ^ etc.)
        // ==========================================================
        if (is_operator(t)) {
            show_debug_message("Found operator: " + string(t));

            while (array_length(stack) > 0) {
                var top = stack[array_length(stack) - 1];
                if (is_operator(top) && (
                    get_precedence(top) > get_precedence(t) ||
                    (get_precedence(top) == get_precedence(t) && !is_right_associative(t))
                )) {
                    var popped_op = array_pop(stack);
                    array_push(output, popped_op);
                    show_debug_message("Popped higher/equal precedence operator '" + string(popped_op) + "' to output");
                } else {
                    break;
                }
            }

            array_push(stack, t);
            show_debug_message("Pushed operator '" + string(t) + "' onto stack");
            continue;
        }

        // ==========================================================
        // 7) FUNCTIONS
        // ==========================================================
        if (is_function(t)) {
            var fn_name = tu;

            // ------------------------------------------------------
            // 7a) NEW: Balanced 1-arg function handler for non-RND
            //     Handles cases like INT( RND(1,6) ), ABS(A+B*C) etc.
            //     We scan for the matching ')' and recursively convert
            //     the inner tokens with THIS same function.
            // ------------------------------------------------------
            if (i + 1 < array_length(tokens) && tokens[i + 1] == "(" && fn_name != "RND") {
                var depthB  = 0;
                var jB      = i + 1;
                var matchedB = false;

                // Find matching ')'
                while (jB < array_length(tokens)) {
                    var tkB = tokens[jB];
                    if (tkB == "(") { depthB++; }
                    else if (tkB == ")") { depthB--; if (depthB == 0) { matchedB = true; break; } }
                    jB++;
                }

                if (matchedB) {
                    // Extract inner tokens (between the outermost '(' and ')')
                    var inner_tokens = [];
                    for (var kB = i + 2; kB <= jB - 1; kB++) {
                        array_push(inner_tokens, tokens[kB]);
                    }

                    // Convert inner expression to postfix and append
                    var inner_post = infix_to_postfix(inner_tokens);
                    _push_all(output, inner_post);

                    // Push the function itself
                    array_push(output, fn_name);
                    show_debug_message("Processed balanced 1-arg function: " + fn_name + "(...)");

                    i = jB; // consume up to ')'
                    continue;
                }
                // If we didn't match, fall through to existing logic below
            }

            // ------------------------------------------------------
            // 7b) RND(min, max) handling for complex arguments
            // ------------------------------------------------------
            if (fn_name == "RND") {
                if (i + 1 < array_length(tokens) && tokens[i + 1] == "(") {
                    var _depth = 0;
                    var j = i + 1;
                    var matched = false;
                    var arg_tokens = [[]]; // Array of token lists for each argument
                    var arg_index = 0;

                    // Collect tokens until matching ')'
                    while (j < array_length(tokens)) {
                        var tk = tokens[j];
                        if (tk == "(") {
                            _depth++;
                            if (_depth > 1) array_push(arg_tokens[arg_index], tk);
                        } else if (tk == ")") {
                            _depth--;
                            if (_depth == 0) { matched = true; break; }
                            array_push(arg_tokens[arg_index], tk);
                        } else if (tk == "," && _depth == 1) {
                            arg_index++;
                            array_push(arg_tokens, []);
                        } else {
                            array_push(arg_tokens[arg_index], tk);
                        }
                        j++;
                    }

                    if (matched) {
                        if (array_length(arg_tokens) == 1 && array_length(arg_tokens[0]) == 0) {
                            // Empty parens: RND()
                            array_push(output, "1");
                            array_push(output, "RND1");
                            show_debug_message("Processed empty RND() → default to RND(1)");
                            i = j;
                            continue;
                        } else if (array_length(arg_tokens) == 1) {
                            // One arg: RND(n)
                            var inner_post = infix_to_postfix(arg_tokens[0]);
                            _push_all(output, inner_post);
                            array_push(output, "RND1");
                            show_debug_message("Processed RND(n): " + string(arg_tokens[0]));
                            i = j;
                            continue;
                        } else if (array_length(arg_tokens) == 2) {
                            // Two args: RND(min, max)
                            var min_post = infix_to_postfix(arg_tokens[0]);
                            var max_post = infix_to_postfix(arg_tokens[1]);
                            _push_all(output, min_post);
                            _push_all(output, max_post);
                            array_push(output, "RND2");
                            show_debug_message("Processed RND(min,max): " + string(arg_tokens[0]) + ", " + string(arg_tokens[1]));
                            i = j;
                            continue;
                        }
                    }
                    // Malformed RND call
                    show_debug_message("Malformed RND call at token '" + string(t) + "' — passing through");
                    array_push(output, t);
                    i = j;
                    continue;
                } else {
                    // RND without parentheses
                    show_debug_message("? Function 'RND' used without parentheses. Defaulting to RND(1) behavior.");
                    array_push(output, "1");
                    array_push(output, "RND1");
                    continue;
                }
            }

            // ------------------------------------------------------
            // 7c) Existing special cases for other functions
            // ------------------------------------------------------
            // Function used WITHOUT parentheses → fallback behavior (fn(1))
            if (i + 1 >= array_length(tokens) || tokens[i + 1] != "(") {
                show_debug_message("? Function '" + string(t) + "' used without parentheses. Defaulting to " + fn_name + "(1) behavior.");
                array_push(output, "1");
                array_push(output, fn_name);
                continue;
            }

            // Empty parens like REPEAT$()
            if (i + 2 < array_length(tokens) && tokens[i + 1] == "(" && tokens[i + 2] == ")") {
                show_debug_message("Function " + fn_name + "() with no args not supported (non-RND) — passing token through");
                array_push(output, t);
                i += 2;
                continue;
            }

            // REPEAT$(s, n) — exactly 2 args (simple positional form)
            if (fn_name == "REPEAT$") {
                show_debug_message("REPEAT$ DEBUG: i=" + string(i) + ", total=" + string(array_length(tokens)));
                if (i + 5 < array_length(tokens)
                &&  tokens[i + 1] == "("
                &&  tokens[i + 3] == ","
                &&  tokens[i + 5] == ")")
                {
                    var rq1 = tokens[i + 2];
                    var rq2 = tokens[i + 4];
                    array_push(output, rq1);
                    array_push(output, rq2);
                    array_push(output, fn_name);
                    show_debug_message("Processed REPEAT$(s,n): args = " + string(rq1) + ", " + string(rq2));
                    i += 5;
                } else {
                    show_debug_message("Malformed REPEAT$ call starting at token '" + string(t) + "'");
                    array_push(output, t);
                }
                continue;
            }

            // MID$(s, start, len) — 3 args
            if (fn_name == "MID$") {
                show_debug_message("MID$ DEBUG: i=" + string(i) + ", total tokens=" + string(array_length(tokens)));
                if (i + 7 < array_length(tokens)
                &&  tokens[i + 1] == "("
                &&  tokens[i + 3] == ","
                &&  tokens[i + 5] == ","
                &&  tokens[i + 7] == ")")
                {
                    var ma1 = tokens[i + 2];
                    var ma2 = tokens[i + 4];
                    var ma3 = tokens[i + 6];
                    array_push(output, ma1);
                    array_push(output, ma2);
                    array_push(output, ma3);
                    array_push(output, fn_name);
                    show_debug_message("Processed MID$(s,start,len): " + string(ma1) + ", " + string(ma3));
                    i += 7;
                } else {
                    show_debug_message("Malformed MID$ call starting at token '" + string(t) + "'");
                    array_push(output, t);
                }
                continue;
            }

            // LEFT$/RIGHT$ (2 args)
            if ((fn_name == "LEFT$" || fn_name == "RIGHT$")
            &&  i + 5 < array_length(tokens)
            &&  tokens[i + 1] == "("
            &&  tokens[i + 3] == ","
            &&  tokens[i + 5] == ")")
            {
                var la1 = tokens[i + 2];
                var la2 = tokens[i + 4];
                array_push(output, la1);
                array_push(output, la2);
                array_push(output, fn_name);
                show_debug_message("Processed " + fn_name + "(arg1,arg2): " + string(la1) + ", " + string(la2));
                i += 5;
                continue;
            }

            // Fallback: malformed function call
            show_debug_message("Malformed function call: " + string(t));
            array_push(output, t);
            continue;
        }

        // ==========================================================
        // 8) UNKNOWN TOKEN — pass through (evaluator often tolerates)
        // ==========================================================
        show_debug_message("Unknown token, adding to output: " + string(t));
        array_push(output, t);
    }

    // ==========================================================
    // Drain operator stack
    // ==========================================================
    while (array_length(stack) > 0) {
        var tail = array_pop(stack);
        array_push(output, tail);
        show_debug_message("Drained operator stack → appended '" + string(tail) + "'");
    }

    show_debug_message("Final postfix: " + string(output));
    return output;
}
/// @script evaluate_postfix
/// @description Evaluate a postfix token array, with support for 1-D arrays.
/// Notes:
/// - Array tokens arrive as a single atom like "D(I)" because infix_to_postfix collapses NAME(...).
/// - We defensively avoid treating built-in functions as arrays (e.g., "INT(5)").
/// - Comma tokens are ignored completely.
/// - Returns the TOP of the stack (last pushed), else 0.

function evaluate_postfix(postfix) {
    var stack = [];
    show_debug_message("Evaluating postfix: " + string(postfix));

    for (var i = 0; i < array_length(postfix); i++) {
        var token = postfix[i];
        show_debug_message("POSTFIX: Processing token [" + string(i) + "] → " + string(token));

        // Normalize once
        var trimmed     = string_trim(string(token));
        var token_upper = string_upper(trimmed);

        // -------------------------------------------------------
        // Ignore commas completely (arg separators, never values)
        // -------------------------------------------------------
        if (trimmed == ",") {
            show_debug_message("POSTFIX: Ignoring stray comma token");
            continue;
        }

        // -------------------------------------------------------
        // ARRAY READ SUPPORT (atom form: NAME(index_expr))
        // -------------------------------------------------------
        // Conditions:
        //   - contains '(' and ends with ')'
        //   - the NAME portion is NOT a known function
        var openPos = string_pos("(", token_upper);
        if (openPos > 0 && string_char_at(token_upper, string_length(token_upper)) == ")") {
            var arrNameU = string_copy(token_upper, 1, openPos - 1);
            var innerLen = string_length(token) - openPos - 1;    // count between '(' and ')'
            var idxTextRaw = string_copy(token, openPos + 1, innerLen); // keep RAW (original case/spaces)

            if (!is_function(arrNameU)) {
                var arrName = arrNameU; // arrays stored uppercase in helpers
                var idxText = string_trim(idxTextRaw);

                show_debug_message("POSTFIX[ARRAY]: Candidate '" + string(token) + "' → name='" + arrName + "', idxText='" + idxText + "'");

                var idxVal = basic_evaluate_expression_v2(idxText);
                if (!is_real(idxVal)) {
                    show_debug_message("POSTFIX[ARRAY] ERROR: Index non-numeric from '" + idxText + "' → '" + string(idxVal) + "'. Pushing 0.");
                    array_push(stack, 0);
                    continue;
                }

                var arrVal = basic_array_get(arrName, idxVal); // your 1-based getter
                show_debug_message("POSTFIX[ARRAY]: " + arrName + "(" + string(idxVal) + ") → " + string(arrVal));
                array_push(stack, arrVal);
                continue;
            }
        }

        // -------------------------------------------------------
        // Numeric literal
        // -------------------------------------------------------
        if (is_numeric_string(trimmed)) {
            var num = real(trimmed);
            array_push(stack, num);
            show_debug_message("POSTFIX: Pushed number → " + string(num));
            continue;
        }

        // -------------------------------------------------------
        // Quoted string literal
        // -------------------------------------------------------
        if (string_length(trimmed) >= 2
        &&  string_char_at(trimmed, 1) == "\""
        &&  string_char_at(trimmed, string_length(trimmed)) == "\"") {
            var str = string_copy(trimmed, 2, string_length(trimmed) - 2);
            array_push(stack, str);
            show_debug_message("POSTFIX: Pushed quoted string literal → " + str);
            continue;
        }

        // -------------------------------------------------------
        // Operators
        // -------------------------------------------------------
        if (is_operator(token_upper)) {
            if (array_length(stack) < 2) {
                show_debug_message("? POSTFIX ERROR: Not enough operands for operator " + token_upper);
                return 0;
            }
            var b = array_pop(stack);
            var a = array_pop(stack);
            var result = 0;

            switch (token_upper) {
                case "+":  result = (is_string(a) || is_string(b)) ? string(a) + string(b) : a + b; break;
                case "-":
                    if (is_string(a)) a = real(a);
                    if (is_string(b)) b = real(b);
                    result = a - b; break;
				case "=":
				    // Equality comparison: BASIC IF x=5 then ...
				    if (is_string(a)) a = real(a);
				    if (is_string(b)) b = real(b);
				    result = (a == b) ? 1 : 0;
				    break;
                case "*":
                    if (is_string(a)) a = real(a);
                    if (is_string(b)) b = real(b);
                    result = a * b; break;
                case "/":
                    if (is_string(a)) a = real(a);
                    if (is_string(b)) b = real(b);
                    result = (b != 0) ? a / b : 0; break;
                case "%":
                case "MOD":
                    if (is_string(a)) a = real(a);
                    if (is_string(b)) b = real(b);
                    result = a mod b; break;
                case "^":
                    if (is_string(a)) a = real(a);
                    if (is_string(b)) b = real(b);
                    result = power(a, b); break;
                default:
                    show_debug_message("? POSTFIX WARNING: Unknown operator = " + token_upper + " → 0");
                    result = 0; break;
            }

            array_push(stack, result);
            show_debug_message("POSTFIX: Operator result (" + token_upper + ") = " + string(result));
            continue;
        }

        // -------------------------------------------------------
        // Functions (numeric + string)
        // -------------------------------------------------------
        if (is_function(token_upper)) {
            // normalize again, just in case
            token_upper = string_upper(string_trim(token));
            show_debug_message("POSTFIX: Dispatching function → '" + token_upper + "'");

            switch (token_upper) {
                // ---- Random
                case "RND1": {
                    var n = safe_real_pop(stack);
                    if (n <= 0) n = 1;
                    var r1 = irandom(n - 1) + 1;
                    array_push(stack, r1);
                    show_debug_message("POSTFIX: RND1(" + string(n) + ") → " + string(r1));
                    break;
                }
                case "RND2": {
                    var max_val_raw = array_pop(stack);
                    var min_val_raw = array_pop(stack);

                    var min_val, max_val;

                    // --- Resolve min value ---
                    if (is_real(min_val_raw)) {
                        min_val = min_val_raw;
                    } else if (ds_map_exists(global.basic_variables, min_val_raw) && is_real(global.basic_variables[? min_val_raw])) {
                        min_val = global.basic_variables[? min_val_raw];
                    } else {
                        min_val = undefined;
                    }

                    // --- Resolve max value ---
                    if (is_real(max_val_raw)) {
                        max_val = max_val_raw;
                    } else if (ds_map_exists(global.basic_variables, max_val_raw) && is_real(global.basic_variables[? max_val_raw])) {
                        max_val = global.basic_variables[? max_val_raw];
                    } else {
                        max_val = undefined;
                    }

                    // --- Validate ---
                    if (!is_real(min_val) || !is_real(max_val)) {
                        // Show on screen without triggering tokenization
                        basic_system_message(
                            "ERROR: RND(min,max) requires numeric arguments — got '" 
                            + string(min_val_raw) + "', '" + string(max_val_raw) + "'"
                        );
                        array_push(stack, 0); // keep evaluation alive
                    } else {
                        var result = irandom_range(min_val, max_val);
                        array_push(stack, result);
                        show_debug_message("POSTFIX: RND2(" + string(min_val) + "," + string(max_val) + ") → " + string(result));
                    }
                    break;
                }

                // ---- Math
                case "ABS": array_push(stack, abs(safe_real_pop(stack))); break;
                case "EXP": array_push(stack, exp(safe_real_pop(stack))); break;

                // Preserving your prior semantics: LOG & LOG10 both as base-10
                case "LOG":
                case "LOG10": {
                    var v = safe_real_pop(stack);
                    array_push(stack, (ln(v) / ln(10)));
                    break;
                }

                case "SGN": {
                    var vsgn = safe_real_pop(stack);
                    var sgnv = (vsgn > 0) - (vsgn < 0);
                    array_push(stack, sgnv);
                    show_debug_message("POSTFIX: SGN(" + string(vsgn) + ") → " + string(sgnv));
                    break;
                }

                case "INT": array_push(stack, floor(safe_real_pop(stack))); break;
                case "SIN": array_push(stack, sin(safe_real_pop(stack)));   break;
                case "COS": array_push(stack, cos(safe_real_pop(stack)));   break;
                case "TAN": array_push(stack, tan(safe_real_pop(stack)));   break;

                // ---- String conversions
                case "STR$": {
                    var vstr = safe_real_pop(stack);
                    var s = string(vstr);
                    array_push(stack, s);
                    show_debug_message("POSTFIX: STR$ → " + s);
                    break;
                }
                case "CHR$": {
                    var cv = safe_real_pop(stack);
                    var c  = chr(cv);
                    array_push(stack, c);
                    show_debug_message("POSTFIX: CHR$ → " + c);
                    break;
                }

                // ---- String functions we added
                case "REPEAT$": {
                    // Stack top: n ; below: s$
                    var nrep = floor(safe_real_pop(stack));
                    var srep = string(array_pop(stack));
                    if (nrep < 0) nrep = 0;

                    var max_out = 65535;
                    var unit = max(1, string_length(srep));
                    if (unit * nrep > max_out) nrep = floor(max_out / unit);

                    var outrep = "";
                    repeat (nrep) outrep += srep;
                    array_push(stack, outrep);
                    show_debug_message("POSTFIX: REPEAT$('"+srep+"', "+string(nrep)+") → len="+string(string_length(outrep)));
                    break;
                }

                case "LEFT$": {
                    // Stack top: n ; below: s$
                    var nleft = floor(safe_real_pop(stack));
                    var sleft = string(array_pop(stack));
                    if (nleft < 0) nleft = 0;

                    var outleft = (nleft <= 0) ? "" : string_copy(sleft, 1, nleft);
                    array_push(stack, outleft);
                    show_debug_message("POSTFIX: LEFT$('"+sleft+"', "+string(nleft)+") → '"+outleft+"'");
                    break;
                }

                case "RIGHT$": {
                    // Stack top: n ; below: s$
                    var nright = floor(safe_real_pop(stack));
                    var sright = string(array_pop(stack));
                    if (nright < 0) nright = 0;

                    var lenr = string_length(sright);
                    var start = max(1, lenr - nright + 1);
                    var outright = (nright <= 0) ? "" : string_copy(sright, start, nright);
                    array_push(stack, outright);
                    show_debug_message("POSTFIX: RIGHT$('"+sright+"', "+string(nright)+") → '"+outright+"'");
                    break;
                }

                case "MID$": {
                    // Stack top: len ; below: start ; below: s$
                    // 1-based BASIC semantics
                    var lmid = floor(safe_real_pop(stack));
                    var smid = floor(safe_real_pop(stack));
                    var strm = string(array_pop(stack));

                    if (lmid < 0) lmid = 0;
                    if (smid < 1) smid = 1;

                    var outm = "";
                    if (lmid > 0 && smid <= string_length(strm)) {
                        outm = string_copy(strm, smid, lmid);
                    }
                    array_push(stack, outm);
                    show_debug_message("POSTFIX: MID$('"+strm+"', "+string(smid)+", "+string(lmid)+") → '"+outm+"'");
                    break;
                }

                default:
                    show_debug_message("? POSTFIX WARNING: Unknown function = " + token_upper + " — pushing last real as fallback");
                    array_push(stack, safe_real_pop(stack));
                    break;
            }

            continue;
        }

        // -------------------------------------------------------
        // Scalar variable fallback
        // -------------------------------------------------------
        if (ds_map_exists(global.basic_variables, token_upper)) {
            var vv = global.basic_variables[? token_upper];
            if (is_string(vv) && string_length(vv) == 0) vv = 0;
            array_push(stack, vv);
            show_debug_message("POSTFIX: Loaded variable " + token_upper + " = " + string(vv));
            continue;
        }

        // -------------------------------------------------------
        // Fallback: push as string literal (unknown token)
        // -------------------------------------------------------
        array_push(stack, trimmed);
        show_debug_message("POSTFIX: Pushed fallback string → " + trimmed);
    }

    // Return the TOP of the stack (final value), else 0
    return (array_length(stack) > 0) ? stack[array_length(stack) - 1] : 0;
}
// obj_basic_interpreter → Step Event

// WATCHDOG: are output buffers DS lists this frame?
/*var _ol = global.output_lines;
var _oc = global.output_colors;
show_debug_message(
    "WATCH: out_lines=" + string(_ol) +
    " is_real=" + string(is_real(_ol)) +
    " exists=" + string(is_real(_ol) && ds_exists(_ol, ds_type_list)) +
    " | out_colors=" + string(_oc) +
    " is_real=" + string(is_real(_oc)) +
    " exists=" + string(is_real(_oc) && ds_exists(_oc, ds_type_list))
);

*/

// ==============================
// Sort program lines in ascending order
// ==============================
if (ds_exists(global.line_list, ds_type_list)) {
    ds_list_sort(global.line_list, true);
}

// ==============================
// === Program Ended: Wait for user action ===
// ==============================
if (global.program_has_ended) {
    if (keyboard_check_pressed(vk_pageup)) {
        global.scroll_offset = max(global.scroll_offset - 1, 0);
    }
    if (keyboard_check_pressed(vk_pagedown)) {
        var font_height = string_height("A");
        var visible_lines = floor(room_height / font_height) - 2;
        var total_lines = ds_list_size(global.output_lines);
        global.scroll_offset = min(global.scroll_offset + 1, max(0, total_lines - visible_lines));
    }

    if (keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_escape)) {
        global.program_has_ended = false;
        global.current_mode = 0;
        room_goto(global.editor_return_room);
    }
    return;
}

// ==============================
// === Handle INPUT or PAUSE ===
// ==============================
if (global.awaiting_input) {
    if (global.pause_mode) {
        if (keyboard_check_pressed(vk_enter)) {
            global.awaiting_input = false;
            global.pause_mode = false;
            global.input_target_var = "";
            global.interpreter_input = "";
        }
    } else {
        for (var _k = 32; _k <= 126; _k++) {
            if (keyboard_check_pressed(_k)) handle_interpreter_character_input(_k);
        }
        if (keyboard_check_pressed(vk_enter))     handle_interpreter_character_input(vk_enter);
        if (keyboard_check_pressed(vk_backspace)) handle_interpreter_character_input(vk_backspace);
    }
    return;
}

// ==============================
// === Synchronize for structured IF…ELSE handling ===
// Ensure handlers read the correct current line index
// ==============================
global.interpreter_current_line_index = line_index;

// ==============================
// === Handle Jumps (statement-first, then legacy line jump) ===
// These are set by commands like IF/GOTO (line jump) and NEXT (stmt jump, new)
// ==============================
if (global.interpreter_use_stmt_jump && global.interpreter_target_line >= 0) {
    show_debug_message("JUMP: Using statement-level jump → line="
        + string(global.interpreter_target_line) + ", stmt="
        + string(global.interpreter_target_stmt));

    // Jump to requested line
    line_index = global.interpreter_target_line;
    global.interpreter_current_line_index = global.interpreter_target_line;

    // Tell the dispatcher which statement on that line to resume at
    global.interpreter_resume_stmt_index = max(0, global.interpreter_target_stmt);

    // Clear stmt-jump flags
    global.interpreter_use_stmt_jump = false;
    global.interpreter_target_line = -1;
    global.interpreter_target_stmt = 0;

    // Ensure legacy jump is cleared when stmt-jump is used
    global.interpreter_next_line = -1;

} else if (global.interpreter_next_line >= 0) {
    show_debug_message("JUMP: Using legacy line jump → line="
        + string(global.interpreter_next_line));

    // Legacy behavior: jump to a new line, start at first statement
    line_index = global.interpreter_next_line;
    global.interpreter_current_line_index = global.interpreter_next_line;

    global.interpreter_resume_stmt_index = 0;
    global.interpreter_next_line = -1;
}

// ==============================
// === End of Program Check ===
// ==============================
if (line_index >= ds_list_size(global.line_list)) {
    global.interpreter_running = false;
}

// ==============================
// === Execute BASIC Line ===
// ==============================
if (line_index < ds_list_size(global.line_list)) {
    // Fetch the next line of BASIC
    var line_number = ds_list_find_value(global.line_list, line_index);
    var code        = ds_map_find_value(global.program_map, line_number);

    // Trim and split on unquoted, top-level colons
    var trimmed = string_trim(code);
    var parts   = split_on_unquoted_colons(trimmed);

    // Dispatch each sub-statement in turn
    global.current_line_number = line_number;
    show_debug_message("Running line " + string(line_number));

    // NEW: resume at a specific statement index (set by stmt-level jump)
    var _start_stmt = 0;
    if (global.interpreter_resume_stmt_index > 0) {
        _start_stmt = global.interpreter_resume_stmt_index;
        show_debug_message("Resuming at statement index " + string(_start_stmt)
            + " on line " + string(line_number));
        // One-shot consumption: reset after applying
        global.interpreter_resume_stmt_index = 0;
    }

	for (var p = _start_stmt; p < array_length(parts); p++) {
	    var stmt = string_trim(parts[p]);
	    if (stmt == "") continue;

	    // Strip BASIC-style REM
	    stmt = strip_basic_remark(stmt);

	    // Pull off the verb vs. its argument
	    var sp2  = string_pos(" ", stmt);
	    var cmd2 = (sp2 > 0)
	                 ? string_upper(string_copy(stmt, 1, sp2 - 1))
	                 : string_upper(stmt);
	    var arg2 = (sp2 > 0)
	                 ? string_trim(string_copy(stmt, sp2 + 1, string_length(stmt)))
	                 : "";

	    // >>> NEW: tell commands which colon-slot we're on <<<
	    global.interpreter_current_stmt_index = p;

	    show_debug_message("Command: " + cmd2 + " | Arg: " + arg2);
	    handle_basic_command(cmd2, arg2);


        // If any jump was requested, stop processing further parts on this line

        // 1) Statement-level jump (inline FOR/NEXT loop body, etc.)
        if (global.interpreter_use_stmt_jump && global.interpreter_target_line >= 0) {
            show_debug_message("Breaking line loop to honor STATEMENT-LEVEL jump request");
            break;
        }

        // 2) Legacy line jump (IF/GOTO/etc.)
        if (global.interpreter_next_line >= 0) {
            show_debug_message("Breaking line loop to honor LINE jump request");
            break;
        }
    }

    // If no jump was requested, advance to the next line
    if (!(global.interpreter_use_stmt_jump && global.interpreter_target_line >= 0)
     && !(global.interpreter_next_line >= 0)) {
        line_index++;
    }
}
else {
    global.interpreter_running = false;
}

// ==============================
// === Escape Returns to Editor ===
// ==============================
if (keyboard_check_pressed(vk_escape)) {
    global.current_mode = 0;
    room_goto(global.editor_return_room);
}

// ==============================
// === F5 Dumps BASIC to Console ===
// ==============================
if (keyboard_check_released(vk_f5) && basic_run_to_console_flag == false) {
    basic_run_to_console_flag = true;
    basic_run_to_console();
}

// ==============================
// === Manual Scroll (Always Available) ===
// ==============================
if (keyboard_check_pressed(vk_pageup)) {
    global.scroll_offset = max(global.scroll_offset - 1, 0);
}
if (keyboard_check_pressed(vk_pagedown)) {
    var font_height2 = string_height("A");
    var visible_lines2 = floor(room_height / font_height2) - 2;
    var total_lines2 = ds_list_size(global.output_lines) + (global.awaiting_input ? 1 : 0);
    global.scroll_offset = min(global.scroll_offset + 1, max(0, total_lines2 - visible_lines2));
}

/// @function basic_cmd_for(arg) 
/// @description Parses and handles BASIC FOR loop initialization (spacing-tolerant; optional STEP)
///
/// Accepted headers:
///   FOR I=1 TO 5
///   FOR I = 1 TO 5
///   FOR I=1 TO 5 STEP 2
///
/// Notes:
/// - We KEEP legacy behavior: frame.return_line = line_index (whatever your dispatcher sets).
/// - We also store loop_line/loop_stmt = -1 as placeholders for future inline-colon support.
/// - Uses only globals you already define in obj_globals Create Event.

function basic_cmd_for(arg) {
    show_debug_message("FOR: Entering handler with argument: '" + string(arg) + "'");

    // --------------------------
    // 1) Normalize / find '='
    // --------------------------
    var raw   = string_trim(string(arg));
    var eqpos = string_pos("=", raw);
    if (eqpos <= 0) {
        show_debug_message("FOR: SYNTAX ERROR — missing '=' in header: '" + raw + "'");
        basic_system_message("SYNTAX ERROR IN FOR: " + raw); // CHANGED
        global.interpreter_running = false;
        return;
    }

    // Left of '=' is the loop variable name
    var varname = string_upper(string_trim(string_copy(raw, 1, eqpos - 1)));
    if (varname == "") {
        show_debug_message("FOR: SYNTAX ERROR — empty variable name before '='");
        basic_system_message("SYNTAX ERROR IN FOR (empty variable): " + raw); // CHANGED
        global.interpreter_running = false;
        return;
    }

    // Right side after '=' should contain: start_expr  TO  to_expr  [ STEP step_expr ]
    var rhs  = string_trim(string_copy(raw, eqpos + 1, string_length(raw) - eqpos));
    var rhsU = string_upper(rhs);

    // --------------------------
    // 2) Locate 'TO' (case-insensitive)
    // --------------------------
    var to_at = -1;
    // Scan explicitly to avoid false positives and keep positions in the ORIGINAL rhs string
    for (var p = 1; p <= string_length(rhs) - 1; p++) {
        if (string_upper(string_copy(rhs, p, 2)) == "TO") {
            to_at = p;
            break;
        }
    }
    if (to_at < 0) {
        show_debug_message("FOR: SYNTAX ERROR — missing 'TO' in: '" + rhs + "'");
        basic_system_message("SYNTAX ERROR IN FOR (missing TO): " + raw); // CHANGED
        global.interpreter_running = false;
        return;
    }

    var start_expr = string_trim(string_copy(rhs, 1, to_at - 1));
    var after_to   = string_trim(string_copy(rhs, to_at + 2, string_length(rhs) - (to_at + 1)));

    if (start_expr == "" || after_to == "") {
        show_debug_message("FOR: SYNTAX ERROR — start/to expressions incomplete. start='" + start_expr + "', after_to='" + after_to + "'");
        basic_system_message("SYNTAX ERROR IN FOR (incomplete expressions): " + raw); // CHANGED
        global.interpreter_running = false;
        return;
    }

    // --------------------------
    // 3) Optional 'STEP'
    // --------------------------
    var step_expr = "1";
    var to_expr   = after_to;

    var step_at = -1;
    for (var q = 1; q <= string_length(after_to) - 3; q++) {
        if (string_upper(string_copy(after_to, q, 4)) == "STEP") {
            step_at = q;
            break;
        }
    }
    if (step_at > 0) {
        to_expr   = string_trim(string_copy(after_to, 1, step_at - 1));
        step_expr = string_trim(string_copy(after_to, step_at + 4, string_length(after_to) - (step_at + 3)));
        if (step_expr == "") step_expr = "1";
    }

    show_debug_message("FOR: Header pieces → var='" + varname + "' | start='" + start_expr + "' | to='" + to_expr + "' | step='" + step_expr + "'");

    // --------------------------
    // 4) Evaluate expressions
    // --------------------------
    var start_tokens  = basic_tokenize_expression_v2(start_expr);
    var start_postfix = infix_to_postfix(start_tokens);
    var start_val     = evaluate_postfix(start_postfix);

    var to_tokens     = basic_tokenize_expression_v2(to_expr);
    var to_postfix    = infix_to_postfix(to_tokens);
    var to_val        = evaluate_postfix(to_postfix);

	var step_val = basic_evaluate_expression_v2(step_expr);


    show_debug_message("FOR: Evaluated values → start=" + string(start_val) + " | to=" + string(to_val) + " | step=" + string(step_val));

    if (step_val == 0) {
        show_debug_message("FOR: WARNING — STEP evaluated to 0; loop would never progress.");
        // Deliberately not auto-fixing to keep semantics obvious. NEXT will handle termination.
    }

    // --------------------------
    // 5) Initialize loop variable
    // --------------------------
    if (!is_undefined(global.basic_variables)) {
        global.basic_variables[? varname] = start_val;
        show_debug_message("FOR: Initialized variable " + varname + " = " + string(start_val));
    } else {
        show_debug_message("FOR: ERROR — global.basic_variables map is undefined.");
        basic_system_message("RUNTIME ERROR: variable store not initialized"); // CHANGED
        global.interpreter_running = false;
        return;
    }

    // --------------------------
    // 6) Prepare and push loop frame
    // --------------------------
    // Keep legacy behavior: your NEXT handler already uses return_line.
    // DO NOT rename this unless you also change NEXT.
    var legacy_return_line = line_index; // relies on the dispatcher’s local/outer variable

    // Record the exact spot to jump back to: the statement AFTER the FOR header
    var loop_line_idx = line_index; // current BASIC line (e.g., 20)
    var loop_stmt_idx = -1;

    // We exposed the current statement index in the Step event (Fix 1).
    // The loop body starts at the very next colon slot.
    if (variable_global_exists("interpreter_current_stmt_index")) {
        loop_stmt_idx = global.interpreter_current_stmt_index + 1;
    }

    show_debug_message("FOR: Loop entry captured → line=" + string(loop_line_idx)
        + ", stmt(after header)=" + string(loop_stmt_idx));

    // Ensure for_stack exists (safety)
    if (!ds_exists(global.for_stack, ds_type_stack)) {
        global.for_stack = ds_stack_create();
        show_debug_message("FOR: Safety — created global.for_stack");
    }

    var frame = {
        varname     : varname,
        to          : to_val,
        step        : step_val,
        return_line : legacy_return_line, // legacy jump target used by current NEXT

        // Inline support placeholders (not used until NEXT is updated)
        loop_line   : loop_line_idx,
        loop_stmt   : loop_stmt_idx
    };

    ds_stack_push(global.for_stack, frame);

    show_debug_message("FOR: Pushed frame → {var=" + varname
        + ", to=" + string(to_val)
        + ", step=" + string(step_val)
        + ", return_line=" + string(legacy_return_line)
        + ", loop=(" + string(loop_line_idx) + "," + string(loop_stmt_idx) + ")}");
}

function basic_evaluate_condition(expr) {
    var s = string_trim(expr);
    show_debug_message("COND: Begin evaluate_condition → '" + s + "'");

    // --- Find a top-level comparison operator without requiring spaces ---
    // Check multi-char ops first to avoid splitting on the '=' of "<=" etc.
    var ops = ["<>", "<=", ">=", "=", "<", ">"];
    var found_op = "";
    var op_pos = 0;
    var _depth = 0;

    // Scan once, track parentheses depth; choose first matching op at depth 0
    for (var i = 1; i <= string_length(s); i++) {
        var ch = string_char_at(s, i);
        if (ch == "(") { _depth++; continue; }
        if (ch == ")") { _depth--; continue; }
        if (_depth != 0) continue;

        // try 2-char ops
        if (i < string_length(s)) {
            var two = string_copy(s, i, 2);
            if (two == "<>" || two == "<=" || two == ">=") {
                found_op = two; op_pos = i;
                show_debug_message("COND: Found 2-char op '" + found_op + "' at pos " + string(op_pos));
                break;
            }
        }
        // try 1-char ops
        if (ch == "=" || ch == "<" || ch == ">") {
            found_op = ch; op_pos = i;
            show_debug_message("COND: Found 1-char op '" + found_op + "' at pos " + string(op_pos));
            break;
        }
    }

    // If we found an operator at top level, split and evaluate both sides fully
    if (found_op != "") {
        var lhs = string_trim(string_copy(s, 1, op_pos - 1));
        var rhs = string_trim(string_copy(s, op_pos + string_length(found_op), string_length(s) - (op_pos + string_length(found_op) - 1)));
        var op  = found_op;

        show_debug_message("COND: Split → LHS='" + lhs + "'  OP='" + op + "'  RHS='" + rhs + "'");

        // 1) Evaluate both sides as expressions
        var lhs_val = basic_evaluate_expression_v2(lhs);
        var rhs_val = basic_evaluate_expression_v2(rhs);
        show_debug_message("COND: Eval → LHS=" + string(lhs_val) + "  RHS=" + string(rhs_val));

        // 2) If either is non-numeric, do string comparisons (original rule)
        var lhs_str = string(lhs_val);
        var rhs_str = string(rhs_val);
        var lhs_is_num = is_real(lhs_val) || is_numeric_string(lhs_str);
        var rhs_is_num = is_real(rhs_val) || is_numeric_string(rhs_str);
        show_debug_message("COND: Types → LHS_is_num=" + string(lhs_is_num) + "  RHS_is_num=" + string(rhs_is_num));

        if (!(lhs_is_num && rhs_is_num)) {
            var sres = false;
            switch (op) {
                case "=":  sres = (lhs_str == rhs_str); break;
                case "<>": sres = (lhs_str != rhs_str); break;
                default:   sres = false; // no ordering on strings
            }
            show_debug_message("COND: String-compare '" + op + "' → " + string(sres));
            return sres;
        }

        // 3) Numeric compare
        var lhs_num = real(lhs_str);
        var rhs_num = real(rhs_str);
        var nres = false;
        switch (op) {
            case "=":  nres = (lhs_num == rhs_num); break;
            case "<":  nres = (lhs_num <  rhs_num); break;
            case ">":  nres = (lhs_num >  rhs_num); break;
            case "<=": nres = (lhs_num <= rhs_num); break;
            case ">=": nres = (lhs_num >= rhs_num); break;
            case "<>": nres = (lhs_num != rhs_num); break;
        }
        show_debug_message("COND: Numeric-compare '" + op + "' → " + string(nres));
        return nres;
    }

    // --- Fallback to your existing space-split path (kept for compatibility) ---
    var tokens = string_split(s, " ");
    if (array_length(tokens) == 3) {
        var lhs2 = string_trim(tokens[0]);
        var op2  = string_trim(tokens[1]);
        var rhs2 = string_trim(tokens[2]);
        show_debug_message("COND: Fallback (space-split) → LHS='" + lhs2 + "' OP='" + op2 + "' RHS='" + rhs2 + "'");

        var lhs_val2 = basic_evaluate_expression_v2(lhs2);
        var rhs_val2 = basic_evaluate_expression_v2(rhs2);
        show_debug_message("COND: Fallback eval → LHS=" + string(lhs_val2) + "  RHS=" + string(rhs_val2));

        var lhs_str2 = string(lhs_val2);
        var rhs_str2 = string(rhs_val2);
        var lhs_is_num2 = is_real(lhs_val2) || is_numeric_string(lhs_str2);
        var rhs_is_num2 = is_real(rhs_val2) || is_numeric_string(rhs_str2);
        show_debug_message("COND: Fallback types → LHS_is_num=" + string(lhs_is_num2) + "  RHS_is_num=" + string(rhs_is_num2));

        if (!(lhs_is_num2 && rhs_is_num2)) {
            var sres2 = false;
            switch (op2) {
                case "=":  sres2 = (lhs_str2 == rhs_str2); break;
                case "<>": sres2 = (lhs_str2 != rhs_str2); break;
                default:   sres2 = false;
            }
            show_debug_message("COND: Fallback string-compare '" + op2 + "' → " + string(sres2));
            return sres2;
        }

        var lhs_num2 = real(lhs_str2);
        var rhs_num2 = real(rhs_str2);
        var nres2 = false;
        switch (op2) {
            case "=":  nres2 = (lhs_num2 == rhs_num2); break;
            case "<":  nres2 = (lhs_num2 <  rhs_num2); break;
            case ">":  nres2 = (lhs_num2 >  rhs_num2); break;
            case "<=": nres2 = (lhs_num2 <= rhs_num2); break;
            case ">=": nres2 = (lhs_num2 >= rhs_num2); break;
            case "<>": nres2 = (lhs_num2 != rhs_num2); break;
        }
        show_debug_message("COND: Fallback numeric-compare '" + op2 + "' → " + string(nres2));
        return nres2;
    }

    // Unary convenience (your existing behavior): ABS(x), RND(x)
    var single = string_upper(string_trim(s));
    if (string_pos("ABS(", single) == 1) {
        var insideA = string_copy(single, 5, string_length(single) - 5);
        insideA = string_delete(insideA, string_length(insideA), 1);
        var aval = abs(real(insideA));
        show_debug_message("COND: Unary ABS(...) → " + string(aval));
        return aval;
    }
    if (string_pos("RND(", single) == 1) {
        var insideR = string_copy(single, 5, string_length(single) - 5);
        insideR = string_delete(insideR, string_length(insideR), 1);
        var rval = irandom(real(insideR));
        show_debug_message("COND: Unary RND(...) → " + string(rval));
        return rval;
    }

    show_debug_message("COND: No operator recognized; returning false");
    return false;
}

function basic_tokenize_expression_v2(expr) {
    show_debug_message("TOKENIZER: Starting expression: '" + expr + "'");

    var tokens = [];
    var i = 1;
    var len = string_length(expr);
    var current = "";

    var function_names = ["RND", "ABS", "EXP", "LOG", "LOG10", "SGN", "INT", "SIN", "COS", "TAN", "STR$", "CHR$", "REPEAT$"];

    while (i <= len) {
        var c = string_char_at(expr, i);
        show_debug_message("TOKENIZER: Char[" + string(i) + "] = '" + c + "'");

        // --- STRING LITERAL SUPPORT (preserve exact quoted content) ---
        if (c == "\"") {
            var str = "\"";
            i++;
            while (i <= len) {
                var ch = string_char_at(expr, i);
                str += ch;
                if (ch == "\"") break;
                i++;
            }
            array_push(tokens, str);
            show_debug_message("TOKENIZER: Token added (quoted string): " + str);
            i++;
            continue;
        }

        // --- Handle whitespace ---
        if (c == " ") {
            if (current != "") {
                show_debug_message("TOKENIZER: Finalizing token from space: '" + current + "'");
                array_push(tokens, string_upper(current) == "MOD" ? "MOD" : current);
                show_debug_message("TOKENIZER: Token added: " + current);
                current = "";
            }
            i++;
            continue;
        }

        // --- Handle operators ---
        if (c == "+" || c == "*" || c == "/" || c == "(" || c == ")" || c == "%") {
            if (current != "") {
                show_debug_message("TOKENIZER: Finalizing token before operator: '" + current + "'");
                array_push(tokens, string_upper(current) == "MOD" ? "MOD" : current);
                show_debug_message("TOKENIZER: Token added: " + current);
                current = "";
            }
            if (c == "(" && array_length(tokens) > 0) {
                var last = string_upper(tokens[array_length(tokens) - 1]);
                if (array_contains(function_names, last)) {
                    array_push(tokens, "(");
                    show_debug_message("TOKENIZER: Function call detected: " + last + "(");
                } else {
                    array_push(tokens, "(");
                    show_debug_message("TOKENIZER: Operator token added: " + c);
                }
            } else {
                array_push(tokens, c);
                show_debug_message("TOKENIZER: Operator token added: " + c);
            }
            i++;
            continue;
        }

        // --- Handle commas ---
        if (c == ",") {
            if (current != "") {
                show_debug_message("TOKENIZER: Finalizing token before comma: '" + current + "'");
                array_push(tokens, string_upper(current) == "MOD" ? "MOD" : current);
                show_debug_message("TOKENIZER: Token added: " + current);
                current = "";
            }
            array_push(tokens, ",");
            show_debug_message("TOKENIZER: Comma token added");
            i++;
            continue;
        }

        // --- Handle subtraction/negative numbers ---
        if (c == "-") {
            var is_negative_number = false;
            if (i < len && (ord(string_char_at(expr, i + 1)) >= 48 && ord(string_char_at(expr, i + 1)) <= 57)) {
                // Check if - is followed by a digit
                if (array_length(tokens) == 0 || current != "") {
                    // If no tokens yet or current is non-empty (e.g., after a variable), treat as subtraction
                    if (current != "") {
                        show_debug_message("TOKENIZER: Finalizing token before subtraction: '" + current + "'");
                        array_push(tokens, string_upper(current) == "MOD" ? "MOD" : current);
                        show_debug_message("TOKENIZER: Token added: " + current);
                        current = "";
                    }
                    array_push(tokens, "-");
                    show_debug_message("TOKENIZER: Subtraction operator token added: -");
                } else {
                    // After an operator or parenthesis, treat as negative number
                    var last_token = tokens[array_length(tokens) - 1];
                    if (last_token == "+" || last_token == "-" || last_token == "*" || 
                        last_token == "/" || last_token == "(" || last_token == "%" || 
                        string_upper(last_token) == "MOD") {
                        is_negative_number = true;
                    }
                }
            } else {
                // Lone - or followed by non-digit is always subtraction
                if (current != "") {
                    show_debug_message("TOKENIZER: Finalizing token before subtraction: '" + current + "'");
                    array_push(tokens, string_upper(current) == "MOD" ? "MOD" : current);
                    show_debug_message("TOKENIZER: Token added: " + current);
                    current = "";
                }
                array_push(tokens, "-");
                show_debug_message("TOKENIZER: Subtraction operator token added: -");
            }

            if (is_negative_number) {
                show_debug_message("TOKENIZER: Beginning negative number with '-'");
                current += "-";
            }
            i++;
            continue;
        }

        // --- Accumulate characters for identifiers or numbers ---
        current += c;
        i++;
    }

    // --- Finalize any remaining token ---
    if (current != "") {
        show_debug_message("TOKENIZER: Finalizing last token: '" + current + "'");
        array_push(tokens, string_upper(current) == "MOD" ? "MOD" : current);
        show_debug_message("TOKENIZER: Token added: " + current);
    }

    show_debug_message("TOKENIZER: Final token list = " + string(tokens));
    return tokens;
}
/// @function basic_cmd_next(arg)
/// @description Handles BASIC NEXT loop continuation (legacy-compatible; optional inline-colon support)
///
/// Behavior:
/// - Legacy: jumps using frame.return_line (set by FOR) → global.interpreter_next_line = return_line + 1
/// - Optional: if your engine exposes statement-level jump globals AND the FOR frame
///   has loop_line/loop_stmt >= 0, jump to that exact (line, stmt).
///
/// Note:
/// - We accept but do not require "NEXT I". If supplied and it doesn't match the top frame,
///   we log a warning (no stack search to keep behavior unchanged).

function basic_cmd_next(arg) {
    show_debug_message("NEXT: Entering handler with arg: '" + string(arg) + "'");

    // --------------------------
    // 0) Validate FOR stack
    // --------------------------
    if (!ds_exists(global.for_stack, ds_type_stack) || ds_stack_empty(global.for_stack)) {
        show_debug_message("NEXT: ERROR — NEXT without matching FOR");
        basic_system_message("NEXT without FOR");
        global.interpreter_running = false;
        return;
    }

    // Peek the current FOR frame
    var frame = ds_stack_top(global.for_stack);

    // --------------------------
    // 1) Optional var check: "NEXT I"
    // --------------------------
    var user_var = string_trim(string_upper(string(arg)));
    if (user_var != "") {
        if (is_struct(frame) && variable_struct_exists(frame, "varname")) {
            if (string_upper(frame.varname) != user_var) {
                // Do NOT alter control flow; just warn (no stack search to avoid side effects).
                show_debug_message("NEXT: WARNING — NEXT " + user_var + " does not match active FOR var " + string(frame.varname));
            }
        }
    }

    // --------------------------
    // 2) Load frame fields
    // --------------------------
    var varname     = frame.varname;
    var to_val      = frame.to;
    var step_val    = frame.step;
    var return_line = frame.return_line;

    // Placeholders for inline-colon support (may be -1 until wired in FOR)
    var loop_line   = (variable_struct_exists(frame, "loop_line")) ? frame.loop_line : -1;
    var loop_stmt   = (variable_struct_exists(frame, "loop_stmt")) ? frame.loop_stmt : -1;

    // --------------------------
    // 3) Validate variable store
    // --------------------------
    if (is_undefined(global.basic_variables)) {
        show_debug_message("NEXT: ERROR — global.basic_variables is undefined.");
        basic_system_message("RUNTIME ERROR: variable store not initialized");
        global.interpreter_running = false;
        return;
    }

    // Fetch current value
    var current = global.basic_variables[? varname];
    show_debug_message("NEXT: Current value of " + string(varname) + " = " + string(current));

    // --------------------------
    // 3a) Sanitize to_val / step_val BEFORE applying the step
    // --------------------------
    if (is_string(to_val))   to_val   = basic_evaluate_expression_v2(to_val);
    if (is_string(step_val)) step_val = basic_evaluate_expression_v2(step_val);

    // Guard against STEP=0 to avoid infinite loop when parser fed 0 (e.g., unary minus mishap)
    if (step_val == 0) {
        var inferred = (to_val >= current) ? 1 : -1;
        show_debug_message("NEXT: STEP evaluated to 0; defaulting to " + string(inferred));
        step_val = inferred;
    }

    // --------------------------
    // 3b) NOW apply the step and persist the loop var
    // --------------------------
    current += step_val;
    global.basic_variables[? varname] = current;
    show_debug_message("NEXT: Updated value of " + string(varname) + " = " + string(current));

    // --------------------------
    // 4) Continuation test
    // --------------------------
    var continue_loop = (step_val > 0) ? (current <= to_val) : (current >= to_val);
    show_debug_message("NEXT: Loop check — continue = " + string(continue_loop)
        + " (to=" + string(to_val) + ", step=" + string(step_val) + ")");

    if (continue_loop) {
        // --------------------------------------------
        // 5a) CONTINUE: perform the jump for next iter
        // --------------------------------------------

        // Try statement-level jump first (only if you’ve exposed the globals)
        var have_stmt_jump =
            variable_global_exists("interpreter_target_line") &&
            variable_global_exists("interpreter_target_stmt");

        if (have_stmt_jump && loop_line >= 0 && loop_stmt >= 0) {
            global.interpreter_target_line = loop_line;
            global.interpreter_target_stmt = loop_stmt;
            if (variable_global_exists("interpreter_use_stmt_jump")) {
                global.interpreter_use_stmt_jump = true;
            }
            show_debug_message("NEXT: Inline jump to (line, stmt) = (" + string(loop_line) + ", " + string(loop_stmt) + ")");
        } else {
            // Legacy compatible line-based jump (what you have today)
            global.interpreter_next_line = return_line + 1;
            show_debug_message("NEXT: Legacy jump — looping back to line index: " + string(global.interpreter_next_line));
        }

    } else {
        // --------------------------------------------
        // 5b) COMPLETE: pop frame and continue after NEXT
        // --------------------------------------------
        ds_stack_pop(global.for_stack);
        show_debug_message("NEXT: Loop complete — popped FOR frame");
        // Execution naturally proceeds to the next statement after NEXT
    }
}

/// @script basic_cmd_if_inline
/// @description Legacy single-line IF…THEN…ELSE handler
function basic_cmd_if_inline(arg) {
    show_debug_message("INLINE IF — Raw arg: '" + arg + "'");

    var cond_str = string_trim(arg);
    var then_pos = string_pos("THEN", string_upper(cond_str));
    if (then_pos <= 0) {
        show_debug_message("?IF ERROR: Missing THEN in '" + cond_str + "'");
        return;
    }

    var else_pos = string_pos("ELSE", string_upper(cond_str));

    var condition = string_trim(string_copy(cond_str, 1, then_pos - 1));
    var then_action, else_action;

    if (else_pos > 0 && else_pos > then_pos) {
        then_action = string_trim(string_copy(cond_str, then_pos + 4, else_pos - then_pos - 4));
        else_action = string_trim(string_copy(cond_str, else_pos + 4, string_length(cond_str)));
    } else {
        then_action = string_trim(string_copy(cond_str, then_pos + 4, string_length(cond_str)));
        else_action = "";
    }

    show_debug_message("Parsed condition: '" + condition + "'");
    show_debug_message("Parsed THEN: '" + then_action + "'");
    show_debug_message("Parsed ELSE: '" + else_action + "'");

    // Detect and evaluate compound conditions
    var logic_op = "";
    var result = false;
    var upper_cond = string_upper(condition);

    if (string_pos("AND", upper_cond) > 0) logic_op = "AND";
    else if (string_pos("OR", upper_cond) > 0) logic_op = "OR";

    if (logic_op != "") {
        var cond_parts = string_split(condition, logic_op);
        if (array_length(cond_parts) != 2) {
            show_debug_message("?IF ERROR: Malformed " + logic_op + " condition: '" + condition + "'");
            return;
        }

        var res1 = basic_evaluate_condition(string_trim(cond_parts[0]));
        var res2 = basic_evaluate_condition(string_trim(cond_parts[1]));
        result = (logic_op == "AND") ? (res1 && res2) : (res1 || res2);

        show_debug_message("Combined condition (" + logic_op + "): " + string(res1) + " " + logic_op + " " + string(res2) + " = " + string(result));
    } else {
        result = basic_evaluate_condition(condition);
        show_debug_message("Single condition result: " + string(result));
    }

    var final_action = result ? then_action : else_action;
    if (final_action == "") {
        show_debug_message("No action to execute for this branch.");
        return;
    }

    show_debug_message((result ? "THEN" : "ELSE") + " executing: '" + final_action + "'");

	// --- Normalize THEN/ELSE action: promote bare assignment to LET ---
	final_action = string_trim(final_action);
	if (final_action != "") {
	    // If it doesn't start with a known command, but looks like assignment at top level, add LET
	    var _sp = string_pos(" ", final_action);
	    var _head = (_sp > 0) ? string_upper(string_copy(final_action, 1, _sp - 1)) : string_upper(final_action);
		
		//TODO - if new verbs are created, add them here
	    var _is_cmd = (_head == "PRINT") || (_head == "LET") || (_head == "INPUT") || (_head == "CLS") ||
	                  (_head == "COLOR") || (_head == "BGCOLOR") || (_head == "IF")   || (_head == "FOR") ||
	                  (_head == "NEXT")  || (_head == "WHILE")  || (_head == "WEND") || (_head == "GOTO") ||
	                  (_head == "GOSUB") || (_head == "RETURN") || (_head == "DIM");

	    if (!_is_cmd) {
	        // Detect '=' at top level (ignore ones inside parentheses)
	        var _depth = 0, eqpos = 0;
	        for (var i = 1; i <= string_length(final_action); i++) {
	            var ch = string_char_at(final_action, i);
	            if (ch == "(") _depth++;
	            else if (ch == ")") _depth--;
	            else if (ch == "=" && _depth == 0) { eqpos = i; break; }
	        }
	        if (eqpos > 0) {
	            final_action = "LET " + final_action;
	            show_debug_message("INLINE IF: Promoted bare assignment to: '" + final_action + "'");
	        }
	    }
	}


    // Parse the action into command and arguments
    var sp = string_pos(" ", final_action);
    var cmd = (sp > 0) ? string_upper(string_copy(final_action, 1, sp - 1)) : string_upper(final_action);
    var action_arg = (sp > 0) ? string_trim(string_copy(final_action, sp + 1, string_length(final_action))) : "";

    show_debug_message("Parsed - cmd: '" + cmd + "', arg: '" + action_arg + "'");

    if (cmd == "GOTO") {
        var line_target = real(action_arg);
        var index = ds_list_find_index(global.line_list, line_target);
        if (index >= 0) {
            interpreter_next_line = index;
            show_debug_message("GOTO from IF → line " + string(line_target) + " (index " + string(index) + ")");
        } else {
            show_debug_message("?IF ERROR: GOTO target line not found: " + string(line_target));
        }
    } else {
        handle_basic_command(cmd, action_arg);
    }
} 
/// @function basic_cmd_let(arg)
/// @description BASIC LET/assignment with array support (D(I)=expr), scalars, and string literals.
/// Notes:
/// - Array indices are evaluated via basic_evaluate_expression_v2 and stored with basic_array_set (1-based).
/// - Safeguards unmatched parentheses and empty pieces to avoid hard crashes.

function basic_cmd_let(arg) {
    show_debug_message("LET: Raw input: '" + string(arg) + "'");

    // ---------------------------
    // 1) Split "name = expr"
    // ---------------------------
    var eq_pos = string_pos("=", arg);
    if (eq_pos <= 0) {
        show_debug_message("LET ERROR: No '=' found in input: " + string(arg));
        return;
    }

    // Normalize name and expression text
    var varname = string_upper(string_trim(string_copy(arg, 1, eq_pos - 1)));
    var expr    = string_trim(string_copy(arg, eq_pos + 1, string_length(arg) - eq_pos));

    show_debug_message("LET: Parsed variable name: '" + varname + "'");
    show_debug_message("LET: Parsed expression    : '" + expr + "'");

    if (varname == "") {
        show_debug_message("LET ERROR: Empty variable name before '='");
        return;
    }
    if (expr == "") {
        show_debug_message("LET WARNING: Empty expression after '='; treating as empty string");
        global.basic_variables[? varname] = "";
        return;
    }

    // -----------------------------------------------
    // 2) String-literal assignment (double quotes)
    // -----------------------------------------------
    if (string_length(expr) >= 2
    &&  string_char_at(expr, 1) == "\""
    &&  string_char_at(expr, string_length(expr)) == "\"")
    {
        var str_val = string_copy(expr, 2, string_length(expr) - 2);
        global.basic_variables[? varname] = str_val;
        show_debug_message("LET: Assigned string value: '" + str_val + "' to '" + varname + "'");
        return;
    }

    // ---------------------------------------------------
    // 3) Array assignment: NAME( index_expr ) = value_expr
    //     - Works for VAR( I ), VAR( 1+J ), etc.
    // ---------------------------------------------------
    var openPos = string_pos("(", varname);
    if (openPos > 0) {
        // Ensure trailing ')'
        if (string_char_at(varname, string_length(varname)) != ")") {
            show_debug_message("LET WARNING: Array syntax missing ')': '" + varname + "'. Falling back to scalar assignment.");
        } else {
            // Extract array name and raw index text (allow spaces inside)
            var arrName = string_copy(varname, 1, openPos - 1);
            var idxText = string_copy(varname, openPos + 1, string_length(varname) - openPos - 1);
            // strip trailing ')' if still present due to odd spacing
            if (string_length(idxText) > 0 && string_char_at(idxText, string_length(idxText)) == ")") {
                idxText = string_delete(idxText, string_length(idxText), 1);
            }

            arrName = string_upper(string_trim(arrName));
            idxText = string_trim(idxText);

            if (arrName == "" || idxText == "") {
                show_debug_message("LET WARNING: Malformed array target. arrName='" + arrName + "', idxText='" + idxText + "'. Falling back to scalar.");
            } else {
                // Evaluate index and value via the standard expression pipeline
                var idxVal   = basic_evaluate_expression_v2(idxText);
                var valueVal = basic_evaluate_expression_v2(expr);

                // Defensive: if idxVal is not numeric, bail gracefully
                if (!is_real(idxVal)) {
                    show_debug_message("LET ERROR: Array index evaluated to non-numeric '" + string(idxVal) + "' from '" + idxText + "'");
                    return;
                }

                // Perform 1-based array set via your helper
                basic_array_set(arrName, idxVal, valueVal);
                show_debug_message("LET: Assigned array '" + arrName + "(" + string(idxVal) + ")' = " + string(valueVal));
                return;
            }
        }
        // If we got here, array syntax was malformed; continue to scalar handling below
    }

    // ---------------------------------------------------
    // 4) Scalar numeric / expression assignment (fallback)
    // ---------------------------------------------------
    var result = basic_evaluate_expression_v2(expr);

    // We don’t force-type; whatever evaluate returns is stored
    global.basic_variables[? varname] = result;

    if (is_string(result)) {
        show_debug_message("LET: Assigned string value: '" + string(result) + "' to '" + varname + "'");
    } else {
        show_debug_message("LET: Assigned numeric value: " + string(result) + " to '" + varname + "'");
    }
}

/// @script build_if_block_map
/// @description Scan basic_program for IF…ELSEIF…ELSE…ENDIF block structure,
///              but skip inline IFs so they don’t trigger mismatches.

function build_if_block_map() {
    // 1) Destroy any old map
    if (variable_global_exists("if_block_map") && ds_exists(global.if_block_map, ds_type_map)) {
        ds_map_destroy(global.if_block_map);
    }
    global.if_block_map = ds_map_create();

    // 2) Temp stack for nested block IFs
    var openStack = ds_stack_create();
    var total     = ds_list_size(global.basic_line_numbers);

    // 3) Walk every line
    for (var idx = 0; idx < total; idx++) {
        var lineNum = global.basic_line_numbers[| idx];
        var rawText = string_trim(global.basic_program[? lineNum]);
        var text    = string_upper(rawText);
        var sp      = string_pos(" ", text);
        var kw      = (sp > 0) ? string_copy(text, 1, sp - 1) : text;

        switch (kw) {
            case "IF":
                // detect inline IF: IF … THEN <command> on same line
                var thenPos = string_pos("THEN", text);
                var after   = (thenPos > 0)
                              ? string_trim(string_copy(rawText, thenPos + 4, string_length(rawText)))
                              : "";
                if (thenPos > 0 && string_length(after) > 0) {
                    // Inline IF → skip block indexing entirely
                    show_debug_message("INLINE IF skip at line " + string(lineNum));
                    break;
                }
                // Block IF → record it
                var info = ds_map_create();
                ds_map_add(info, "startIndex",       idx);
                ds_map_add(info, "elseifIndices",    ds_list_create());
                ds_map_add(info, "elseIndex",        -1);
                ds_map_add(info, "endifIndex",       -1);
                ds_map_add(info, "firstBranchIndex", idx + 1);
                ds_stack_push(openStack, info);
                break;

            case "ELSEIF":
                if (!ds_stack_empty(openStack)) {
                    var top = ds_stack_top(openStack);
                    ds_list_add(top[? "elseifIndices"], idx);
                } else {
                    show_debug_message("?MISMATCH ERROR: ELSEIF at line " + string(lineNum) + " without IF");
                }
                break;

            case "ELSE":
                if (!ds_stack_empty(openStack)) {
                    var top = ds_stack_top(openStack);
                    ds_map_replace(top, "elseIndex", idx);
                } else {
                    show_debug_message("?MISMATCH ERROR: ELSE at line " + string(lineNum) + " without IF");
                }
                break;

            case "ENDIF":
                if (!ds_stack_empty(openStack)) {
                    var top = ds_stack_pop(openStack);
                    ds_map_replace(top, "endifIndex", idx);

                    // recompute firstBranchIndex
                    var eList = top[? "elseifIndices"];
                    var fb = (ds_list_size(eList) > 0)
                             ? eList[| 0]
                             : ((top[? "elseIndex"] >= 0) ? top[? "elseIndex"] : idx);
                    ds_map_replace(top, "firstBranchIndex", fb);

                    ds_map_add(global.if_block_map, top[? "startIndex"], top);
                } else {
                    show_debug_message("?MISMATCH ERROR: ENDIF at line " + string(lineNum) + " without IF");
                }
                break;
        }
    }

    // 4) Any unclosed IFs left on the stack?
    while (!ds_stack_empty(openStack)) {
        var orphan = ds_stack_pop(openStack);
        var startIdx  = orphan[? "startIndex"];
        var startLine = global.basic_line_numbers[| startIdx];
        show_debug_message("?MISMATCH ERROR: IF at line " + string(startLine) + " missing ENDIF");
        ds_map_destroy(orphan);
    }
    ds_stack_destroy(openStack);

    show_debug_message("Built IF block map with " + string(ds_map_size(global.if_block_map)) + " entries.");
}

/// @script basic_cmd_elseif
/// @description Handle an ELSEIF in a block‐structured IF…THEN…ELSEIF…ELSE…ENDIF chain
function basic_cmd_elseif(arg) {
    show_debug_message("ELSEIF START — Raw arg: '" + arg + "'");
    
    // ── GUARD 1: Must have an open IF on the stack ──
    if (ds_stack_empty(global.if_stack)) {
        show_debug_message("?ELSEIF ERROR: ELSEIF without matching IF");
        return;
    }
    
    // 1) Where are we in the program?
    var current_index = global.interpreter_current_line_index;
    
    // 2) Peek the top IF‐frame
    var frame = ds_stack_top(global.if_stack);
    
    // ── GUARD 2: Must have block metadata for this IF ──
    if (!ds_map_exists(global.if_block_map, frame[? "startIndex"])) {
        show_debug_message("?ELSEIF ERROR: No IF‐block metadata (bad nesting?)");
        return;
    }
    
    var taken       = frame[? "takenBranch"];
    var elseif_list = frame[? "elseifIndices"]; // ds_list of all ELSEIF positions
    var else_index  = frame[? "elseIndex"];
    var endif_index = frame[? "endifIndex"];
    
    // 3) Find which ELSEIF this is
    var pos = ds_list_find_index(elseif_list, current_index);
    if (pos < 0) {
        show_debug_message("?ELSEIF ERROR: Unexpected ELSEIF at index " + string(current_index));
        return;
    }
    
    // 4) If we’ve already taken a branch, skip straight through
    if (taken) {
        // decide next jump: next ELSEIF, or ELSE, or ENDIF
        var next_index = -1;
        if (pos < ds_list_size(elseif_list) - 1) {
            next_index = elseif_list[| pos + 1];
        } else if (else_index >= 0) {
            next_index = else_index;
        } else {
            next_index = endif_index;
        }
        global.interpreter_next_line = next_index;
        show_debug_message("ELSEIF skipping to index " + string(next_index));
        return;
    }
    
    // 5) Parse and evaluate this ELSEIF’s condition
    var raw      = string_trim(arg);
    var upperRaw = string_upper(raw);
    var then_pos = string_pos("THEN", upperRaw);
    if (then_pos <= 0) {
        show_debug_message("?ELSEIF ERROR: Missing THEN in '" + raw + "'");
        return;
    }
    var cond_text = string_trim(string_copy(raw, 1, then_pos - 1));
    show_debug_message("Parsed ELSEIF condition: '" + cond_text + "'");
    
    // Reuse your AND/OR logic from basic_cmd_if
    var result = false;
    var logic_op = "";
    var upcond   = string_upper(cond_text);
    if (string_pos("AND", upcond) > 0) logic_op = "AND";
    else if (string_pos("OR", upcond) > 0) logic_op = "OR";
    if (logic_op != "") {
        var parts = string_split(cond_text, logic_op);
        var res1 = basic_evaluate_condition(string_trim(parts[0]));
        var res2 = basic_evaluate_condition(string_trim(parts[1]));
        result = (logic_op == "AND") ? (res1 && res2) : (res1 || res2);
        show_debug_message("Combined ELSEIF (" + logic_op + "): " +
                           string(res1) + " " + logic_op + " " + string(res2) +
                           " = " + string(result));
    } else {
        result = basic_evaluate_condition(cond_text);
        show_debug_message("ELSEIF single condition result: " + string(result));
    }
    
    // 6) If it’s true, mark the frame as “taken” and fall into this block…
    if (result) {
        frame[? "takenBranch"] = true;
        global.interpreter_next_line = current_index + 1;
        show_debug_message("ELSEIF TRUE: entering branch at index " + string(global.interpreter_next_line));
    } else {
        // …otherwise skip to the next ELSEIF/ELSE/ENDIF
        var next_index = (pos < ds_list_size(elseif_list) - 1)
                         ? elseif_list[| pos + 1]
                         : (else_index >= 0 ? else_index : endif_index);
        global.interpreter_next_line = next_index;
        show_debug_message("ELSEIF FALSE: skipping to index " + string(next_index));
    }
}

/// @function handle_basic_command(cmd, arg)
/// @description Routes BASIC commands (and multiple colon-separated statements) to the correct functions
function handle_basic_command(cmd, arg) {
    // Rebuild the full statement (so we catch any colons in the original)
    var full = string_trim(cmd + (string_length(arg) ? " " + arg : ""));

    // Split on unquoted, top-level colons.
    // (Reuse your split_on_unquoted_semicolons logic, but look for ':' instead of ';'.)
    var parts = split_on_unquoted_colons(full);

    // Dispatch each sub-statement in turn
    for (var i = 0; i < array_length(parts); i++) {
        var stmt = string_trim(parts[i]);
        if (stmt == "") continue;

        show_debug_message("DISPATCH PART: " + stmt);

        // Strip any trailing REM
        stmt = strip_basic_remark(stmt);

        // Pull off the verb vs. the rest
        var sp = string_pos(" ", stmt);
        var verb, rest;
        if (sp > 0) {
            verb = string_upper(string_copy(stmt, 1, sp - 1));
            rest = string_trim(string_copy(stmt, sp + 1, string_length(stmt)));
        } else {
            verb = string_upper(stmt);
            rest = "";
        }

        show_debug_message("COMMAND DISPATCH: " + verb + " | ARG: " + rest);

        switch (verb) {
            case "PRINT":
                basic_cmd_print(rest, global.current_line_number);
                break;
            case "LET":
                basic_cmd_let(rest);
                break;
            case "GOTO":
                basic_cmd_goto(rest);
                break;
            case "INPUT":
                basic_cmd_input(rest);
                break;
            case "COLOR":
                basic_cmd_color(rest);
                break;
            case "CLS":
                basic_cmd_cls();
                break;
            case "IF":
                basic_cmd_if(rest);
                break;
            case "ELSEIF":
                basic_cmd_elseif(rest);
                break;
            case "ELSE":
                basic_cmd_else();
                break;
            case "ENDIF":
                basic_cmd_endif();
                break;
            case "FOR":
                basic_cmd_for(rest);
                break;
            case "NEXT":
                basic_cmd_next(rest);
                break;
            case "WHILE":
                basic_cmd_while(rest);
                break;
            case "WEND":
                basic_cmd_wend();
                break;
            case "GOSUB":
                basic_cmd_gosub(rest);
                break;
            case "RETURN":
                basic_cmd_return();
                break;
            case "BGCOLOR":
                basic_cmd_bgcolor(rest);
                break;
            case "PAUSE":
                basic_cmd_pause();
                break;
            case "MODE":
                basic_cmd_mode(rest);
                break;
            case "CLSCHAR":
                basic_cmd_clschar(rest);
                break;
            case "PSET":
                basic_cmd_pset(rest);
                break;
            case "CHARAT":
                basic_cmd_charat(rest);
                break;
            case "PRINTAT":
                basic_cmd_printat(rest);
                break;
            case "FONT":
                basic_cmd_font(rest);
                break;
            case "END":
                basic_cmd_end();
                break;
            case "REM":
                // no-op
                break;
            default:
                // implicit LET?  e.g.  "X = 5"
                if (string_pos("=", verb + " " + rest) > 0) {
                    basic_cmd_let(verb + " " + rest);
                } else {
                    basic_show_message("UNKNOWN COMMAND: " + verb);
                }
                break;
        }
    }
}

/// @script basic_cmd_if
/// @description Block‐structured IF…THEN…ELSEIF…ELSE…ENDIF initializer
function basic_cmd_if(arg) {
    show_debug_message("IF START — Raw arg: '" + arg + "'");

    // 1) Compute the current line‐list index (we assume global.interpreter_next_line was pre-incremented)
    var current_index = global.interpreter_current_line_index;

    // ── Legacy inline IF?  If no block metadata exists, invoke old handler ──
    if (!ds_map_exists(global.if_block_map, current_index)) {
        show_debug_message("No block metadata for line " + string(current_index) + 
                           " — falling back to INLINE IF");
        basic_cmd_if_inline(arg);
        return;
    }

    // 2) Strip off the trailing THEN and isolate the condition
    var raw     = string_trim(arg);
    var upper   = string_upper(raw);
    var then_pos = string_pos("THEN", upper);
    if (then_pos <= 0) {
        show_debug_message("?IF ERROR: Missing THEN in '" + raw + "'");
        return;
    }
    var condition_text = string_trim(string_copy(raw, 1, then_pos - 1));
    show_debug_message("Parsed condition: '" + condition_text + "'");

    // 3) Evaluate the condition (supporting simple AND/OR)
    var result    = false;
    var logic_op  = "";
    var upcond    = string_upper(condition_text);
    if (string_pos("AND", upcond) > 0) logic_op = "AND";
    else if (string_pos("OR", upcond) > 0) logic_op = "OR";

    if (logic_op != "") {
        var parts = string_split(condition_text, logic_op);
        if (array_length(parts) != 2) {
            show_debug_message("?IF ERROR: Malformed " + logic_op + " condition: '" + condition_text + "'");
            return;
        }
        var res1 = basic_evaluate_condition(string_trim(parts[0]));
        var res2 = basic_evaluate_condition(string_trim(parts[1]));
        result = (logic_op == "AND") ? (res1 && res2) : (res1 || res2);
        show_debug_message("Combined condition (" + logic_op + "): " +
                           string(res1) + " " + logic_op + " " + string(res2) +
                           " = " + string(result));
    } else {
        result = basic_evaluate_condition(condition_text);
        show_debug_message("Single condition result: " + string(result));
    }

    // 4) Fetch the precomputed block‐metadata for this IF
    if (!ds_map_exists(global.if_block_map, current_index)) {
        show_debug_message("?IF ERROR: No IF block metadata for line index " + string(current_index));
        return;
    }
    var blockInfo    = global.if_block_map[? current_index];
    var firstBranch  = blockInfo[? "firstBranchIndex"];

    // 5) Push a new frame onto the IF‐stack
    var frame = ds_map_create();
    ds_map_add(frame, "startIndex",      current_index);
    ds_map_add(frame, "takenBranch",     result);
    ds_map_add(frame, "firstBranchIndex", firstBranch);
    ds_map_add(frame, "endifIndex",      blockInfo[? "endifIndex"]);
    ds_map_add(frame, "elseifIndices",   blockInfo[? "elseifIndices"]);  // a ds_list of indices
    ds_map_add(frame, "elseIndex",       blockInfo[? "elseIndex"]);      // –1 if none
    ds_stack_push(global.if_stack, frame);

    // 6) Jump into THEN‐block or skip to the first ELSEIF/ELSE/ENDIF
    if (result) {
        global.interpreter_next_line = current_index + 1;
        show_debug_message("IF TRUE: entering THEN at index " + string(global.interpreter_next_line));
    } else {
        global.interpreter_next_line = firstBranch;
        show_debug_message("IF FALSE: skipping to index " + string(global.interpreter_next_line));
    }
}

/// @description All Global Variables
// obj_globals → Create Event

global.justreturned = 0;
global.program_filename = "";
global.username = "";
global.editor_spawned = false;

// Program and source management
global.program_lines = ds_map_create();
global.basic_program = ds_map_create();
global.program_map  = ds_map_create();

// Line tracking
global.line_list    = ds_list_create();
global.line_numbers = ds_list_create();
global.undo_stack = ds_list_create();
global.output_lines = ds_list_create();
global.output_colors = ds_list_create();
global.input_history = ds_list_create();

// Interpreter control stacks
global.gosub_stack = ds_stack_create();
global.for_stack   = ds_stack_create();
global.while_stack = ds_stack_create();
global.history_index = -1;

// IF…ELSE block handling
global.if_block_map = ds_map_create();
global.if_stack     = ds_stack_create();

// Spawn the editor after globals are ready
instance_create_layer(0, 0, "Instances", obj_editor);

// Initialize variable store
if (!variable_global_exists("basic_variables")) {
    global.basic_variables = ds_map_create();
}

// Output buffer
global.print_line_buffer = "";

// Color settings
global.basic_text_color = make_color_rgb(255, 191, 64);
global.current_draw_color = c_green;
global.background_draw_color = c_black;
global.background_draw_enabled = false;

// Input / Pause
global.awaiting_input = false;
global.input_target_var = "";
global.interpreter_input = "";
global.interpreter_cursor_pos = 0;
global.interpreter_running = false;
global.last_interpreter_string = "";
global.program_has_ended = false;
global.pause_in_effect = false;
global.input_expected = false;
global.pause_mode = false;

// Scrolling control
global.scroll_offset = 0;
global.scroll_lock = false;

// Named colors
global.colors = ds_map_create();
global.colors[? "RED"]     = c_red;
global.colors[? "GREEN"]   = c_green;
global.colors[? "BLUE"]    = c_blue;
global.colors[? "CYAN"]    = c_teal;
global.colors[? "MAGENTA"] = c_fuchsia;
global.colors[? "YELLOW"]  = c_yellow;
global.colors[? "WHITE"]   = c_white;
global.colors[? "BLACK"]   = c_black;
global.colors[? "GRAY"]    = c_gray;
global.colors[? "ORANGE"]  = c_orange;
global.colors[? "LIME"]    = c_lime;
global.colors[? "NAVY"] = make_color_rgb(0, 0, 128);
global.colors[? "DKGRAY"] = make_color_rgb(64, 64, 64);

// MODE control
global.current_mode = 0; // 0 = Text, 1 = Tile graphics, 2 = Pixel graphics
global.mode_rooms = ds_map_create();
global.mode_rooms[? 0] = rm_basic_interpreter; // Text
global.mode_rooms[? 1] = rm_mode1_graphics;    // Tile graphics
global.mode_rooms[? 2] = rm_mode2_pixel;       // Pixel graphics

//MODE 1 sprite sheet container
// FONT registry for MODE 1
global.font_sheets = ds_map_create();
ds_map_add(global.font_sheets, "DEFAULT", spr_charactersheet);
ds_map_add(global.font_sheets, "SPECIAL", spr_charactersheet_special);

global.active_font_name = "DEFAULT";
global.active_font_sprite = global.font_sheets[? global.active_font_name];

global.grid_refresh_needed = false;
global.grid_refresh_char = 32;

global.basic_arrays = ds_map_create(); // name (string) → ds_list

global.interpreter_target_line = -1;
global.interpreter_target_stmt = 0;
global.interpreter_use_stmt_jump = false;
global.interpreter_resume_stmt_index = 0;

global.interpreter_current_stmt_index = 0;

global.config = ds_map_create();
global.config[? "max_line_number"] = 65535;
global.config[? "max_history_size"] = 50;



/// @description Cleanup all global DS structures at game end

// ─────────────────────────────
// MAPS
// ─────────────────────────────
if (ds_exists(global.basic_variables, ds_type_map)) ds_map_destroy(global.basic_variables);
if (ds_exists(global.program_lines, ds_type_map)) ds_map_destroy(global.program_lines);
if (ds_exists(global.basic_program, ds_type_map)) ds_map_destroy(global.basic_program);
if (ds_exists(global.program_map, ds_type_map)) ds_map_destroy(global.program_map);
if (ds_exists(global.colors, ds_type_map)) ds_map_destroy(global.colors);


// ─────────────────────────────
// ARRAYS
// ─────────────────────────────
if (ds_exists(global.basic_arrays, ds_type_map)) {
    // Destroy each backing list…
    var _key = ds_map_find_first(global.basic_arrays);
    while (!is_undefined(_key)) {
        var _lst = global.basic_arrays[? _key];
        ds_list_destroy(_lst);
        _key = ds_map_find_next(global.basic_arrays, _key);
    }
    // Then destroy the map itself
    ds_map_destroy(global.basic_arrays);
}


// ─────────────────────────────
// LISTS
// ─────────────────────────────
if (ds_exists(global.line_list, ds_type_list)) ds_list_destroy(global.line_list);
if (ds_exists(global.line_numbers, ds_type_list)) ds_list_destroy(global.line_numbers);

if (variable_global_exists("basic_line_numbers")) {
    if (ds_exists(global.basic_line_numbers, ds_type_list)) {
        ds_list_destroy(global.basic_line_numbers);
    }
}

if (ds_exists(global.undo_stack, ds_type_list)) ds_list_destroy(global.undo_stack);
if (ds_exists(global.output_lines, ds_type_list)) ds_list_destroy(global.output_lines);
if (ds_exists(global.output_colors, ds_type_list)) ds_list_destroy(global.output_colors);
if (ds_exists(global.input_history, ds_type_list)) ds_list_destroy(global.input_history);

// ─────────────────────────────
// STACKS
// ─────────────────────────────
if (ds_exists(global.gosub_stack, ds_type_stack)) ds_stack_destroy(global.gosub_stack);
if (ds_exists(global.for_stack, ds_type_stack)) ds_stack_destroy(global.for_stack);
if (ds_exists(global.while_stack, ds_type_stack)) ds_stack_destroy(global.while_stack);

// ─────────────────────────────
// TEMPORARY LIST (used in interpreter object)
// ─────────────────────────────
if (variable_global_exists("interpreter_current_program")) {
    if (ds_exists(interpreter_current_program, ds_type_list)) {
        ds_list_destroy(interpreter_current_program);
    }
}

// ─────────────────────────────
// Buffer & State Cleanup
// ─────────────────────────────
global.print_line_buffer = "";
global.editor_spawned = false;

function run_program() {
    show_debug_message("RUN_PROGRAM START - color is: " + string(global.current_draw_color));

    // Guard: no program
    if (ds_list_size(global.line_numbers) == 0) {
        show_error_message("NO PROGRAM");
        return;
    }

    // Deep copy program data to prevent interpreter from modifying editor data
    ds_map_copy(global.basic_program, global.program_lines);

    // Copy line numbers into a working list
    global.basic_line_numbers = ds_list_create();
    ds_list_copy(global.basic_line_numbers, global.line_numbers);

    // Build IF-block map
    build_if_block_map();
    show_debug_message("IF-block map built (" + string(ds_map_size(global.if_block_map)) + " blocks)");

    // ─────────────────────────────────────────────────────────
    // OUTPUT BUFFERS (your original create/clear logic + logs)
    // ─────────────────────────────────────────────────────────
    show_debug_message("RUN_PROGRAM: preparing output buffers…");

    if (!is_real(global.output_lines) || !ds_exists(global.output_lines, ds_type_list)) {
        show_debug_message("RUN_PROGRAM: creating global.output_lines");
        global.output_lines = ds_list_create();
    } else {
        show_debug_message("RUN_PROGRAM: clearing global.output_lines (size="
            + string(ds_list_size(global.output_lines)) + ")");
        ds_list_clear(global.output_lines);
    }

    if (!is_real(global.output_colors) || !ds_exists(global.output_colors, ds_type_list)) {
        show_debug_message("RUN_PROGRAM: creating global.output_colors");
        global.output_colors = ds_list_create();
    } else {
        show_debug_message("RUN_PROGRAM: clearing global.output_colors (size="
            + string(ds_list_size(global.output_colors)) + ")");
        ds_list_clear(global.output_colors);
    }

    // Reset any buffered partial PRINT text so we don't carry over from previous run
    if (is_undefined(global.print_line_buffer)) {
        show_debug_message("RUN_PROGRAM: print_line_buffer was undefined → init to empty");
        global.print_line_buffer = "";
    } else if (string_length(global.print_line_buffer) > 0) {
        show_debug_message("RUN_PROGRAM: print_line_buffer had leftovers → '" 
            + string(global.print_line_buffer) + "' → clearing");
        global.print_line_buffer = "";
    }

    // Interpreter state
    global.interpreter_input  = "";
    global.awaiting_input     = false;
    global.input_target_var   = "";
    global.interpreter_running = true;

    // Set draw color for this run (your existing choice)
    global.current_draw_color = make_color_rgb(255, 191, 64); // Amber

    // Line navigation state
    global.interpreter_current_line_index = 0;
    global.interpreter_next_line = -1;

    // Remember where to return after running
    global.editor_return_room = room;

    // Go to interpreter room
    room_goto(rm_basic_interpreter);
}

function basic_cmd_print(arg, line_number) {

if (!ds_exists(global.output_lines, ds_type_list))  global.output_lines  = ds_list_create();
if (!ds_exists(global.output_colors, ds_type_list)) global.output_colors = ds_list_create();





	var suppress_newline = false;

    // Check for and remove trailing semicolon
    if (string_length(arg) > 0 && string_char_at(arg, string_length(arg)) == ";") {
        suppress_newline = true;
        arg = string_copy(arg, 1, string_length(arg) - 1);
        show_debug_message("PRINT: Trailing semicolon detected; suppressing newline");
    }

    arg = string_trim(arg);
    var output = "";

    // Split into parts by semicolon for multi-part print
   var parts = split_on_unquoted_semicolons(arg);


    for (var i = 0; i < array_length(parts); i++) {
        var part = string_trim(parts[i]);

        if (part == "") continue;

        var treat_as_literal = false;

        if (is_quoted_string(part)) {
            var inner = string_copy(part, 2, string_length(part) - 2);
            if (!string_pos("+", inner) && !string_pos("-", inner) && !string_pos("*", inner) && !string_pos("/", inner)) {
                treat_as_literal = true;
            }
        }

        if (treat_as_literal) {
            output += string_copy(part, 2, string_length(part) - 2);
            show_debug_message("PRINT: Part " + string(i) + " is string literal → " + string_copy(part, 2, string_length(part) - 2));
        } else {
            show_debug_message("PRINT: Part " + string(i) + " is expression → " + part);
            var tokens = basic_tokenize_expression_v2(part);
            show_debug_message("PRINT: Tokens = " + string(tokens));

            var postfix = infix_to_postfix(tokens);
            show_debug_message("PRINT: Postfix = " + string(postfix));

            var result = evaluate_postfix(postfix);
            show_debug_message("PRINT: Evaluated result = " + string(result));

		if (is_real(result)) {
		    if (frac(result) == 0) {
		        output += string(round(result)); // whole number → no decimal
		    } else {
		        output += string_format(result, 12, 8); // retain full format for decimals
		    }
		} else {
		    output += string(result);
		}

        }
    }

    // Append to line buffer with wrap
    var wrap_width = 40;
    var full_line = global.print_line_buffer + output;

	while (string_length(full_line) > wrap_width) {
	    var line = string_copy(full_line, 1, wrap_width);
	    ds_list_add(global.output_lines, line);
	    ds_list_add(global.output_colors, global.current_draw_color);
	    full_line = string_copy(full_line, wrap_width + 1, string_length(full_line) - wrap_width);
	}


    global.print_line_buffer = full_line;

    if (!suppress_newline) {
		basic_wrap_and_commit(global.print_line_buffer, global.current_draw_color);
        show_debug_message("PRINT: Line committed → " + global.print_line_buffer);
        global.print_line_buffer = "";
    } else {
        show_debug_message("PRINT: Output buffered without newline → " + global.print_line_buffer);
    }
}

/// @function basic_run_to_console()
/// @description Executes the BASIC program in memory and prints the output to the console instead of the screen.

function basic_run_to_console() {
    show_debug_message("==== BEGIN PROGRAM CONSOLE OUTPUT ====");

    // Safety check
    if (!ds_exists(global.program_lines, ds_type_map) || !ds_exists(global.line_numbers, ds_type_list)) {
        show_debug_message("No program loaded.");
        return;
    }

    // Local context for LET variable storage
    var local_vars = ds_map_create();

    // Run through each line in order
    for (var i = 0; i < ds_list_size(global.line_numbers); i++) {
        var line_num = ds_list_find_value(global.line_numbers, i);
        var code = ds_map_find_value(global.program_lines, line_num);
        var trimmed = string_trim(code);

        var sp = string_pos(" ", trimmed);
        var cmd = (sp > 0) ? string_upper(string_copy(trimmed, 1, sp - 1)) : string_upper(trimmed);
        var arg = (sp > 0) ? string_trim(string_copy(trimmed, sp + 1, string_length(trimmed))) : "";

        switch (cmd) {
            case "LET":
                var eq_pos = string_pos("=", arg);
                if (eq_pos > 0) {
                    var varname = string_trim(string_copy(arg, 1, eq_pos - 1));
                    var value = string_trim(string_copy(arg, eq_pos + 1, string_length(arg)));
                    var value_num = real(value);
                    ds_map_replace(local_vars, varname, value_num);
                }
                break;

            case "PRINT":
                // Check if last character is semicolon
                var ends_with_semicolon = (string_char_at(arg, string_length(arg)) == ";");
                if (ends_with_semicolon) {
                    arg = string_copy(arg, 1, string_length(arg) - 1);
                }

                var segments = string_split(arg, "+");
                var output = "";
                for (var j = 0; j < array_length(segments); j++) {
                    var segment = string_trim(segments[j]);
                    if (string_length(segment) >= 2 && string_char_at(segment, 1) == "\"" && string_char_at(segment, string_length(segment)) == "\"") {
                        output += string_copy(segment, 2, string_length(segment) - 2);
                    } else if (ds_map_exists(local_vars, segment)) {
                        output += string(ds_map_find_value(local_vars, segment));
                    } else {
                        output += segment;
                    }
                }

                if (ends_with_semicolon) {
                    // no newline
                    show_debug_message(">> " + output);
                } else {
                    show_debug_message(">> " + output + "\n");
                }
                break;

            default:
                show_debug_message("Unknown command on line " + string(line_num) + ": " + cmd);
        }
    }

    ds_map_destroy(local_vars);
	basic_run_to_console_flag = false;
    show_debug_message("==== END PROGRAM CONSOLE OUTPUT ====");
}

if (global.justreturned == 1) {
    current_input = "";
    cursor_pos = 0;
    keyboard_string = "";
    global.justreturned = 0;
    exit; // skip the rest of this Step event
}

if (showing_dir_overlay) {
    if (keyboard_check_pressed(vk_enter) || keyboard_check_pressed(vk_escape)) {
        showing_dir_overlay = false;
        dir_listing = []; // Clear the array
    }
    exit; // prevent editor interaction while overlay is up
}




// Handle Enter key
if (keyboard_check_pressed(vk_enter)) {
    add_to_history(current_input);
    process_input_line(current_input);
    current_input = "";
    cursor_pos = 0;
    global.history_index = -1;
    input_buffer = keyboard_string; // reset keyboard buffer
}

 else if (keyboard_check_released(vk_backspace)) {
    if (cursor_pos > 0) {
        current_input = string_delete(current_input, cursor_pos, 1);
        cursor_pos--;
    }
 }
 else if (keyboard_check_pressed(vk_left)) {
    cursor_pos = max(0, cursor_pos - 1);
 }
 else if (keyboard_check_pressed(vk_right)) {
    cursor_pos = min(string_length(current_input), cursor_pos + 1);
 }
 else if (keyboard_check_pressed(vk_up)) {
    navigate_history_up();
 }
 else if (keyboard_check_pressed(vk_down)) {
    navigate_history_down();
 }
 else if (keyboard_check_pressed(vk_pageup)) {
    display_start_line = max(0, display_start_line - lines_per_screen);
 }
 else if (keyboard_check_pressed(vk_pagedown)) {
    var max_start = max(0, ds_list_size(global.line_numbers) - lines_per_screen);
    display_start_line = min(max_start, display_start_line + lines_per_screen);
 }
 else if (keyboard_check(vk_control) && keyboard_check_pressed(ord("Z"))) {
    undo_last_change();
 }
 else if (keyboard_check(vk_f5)) {
    dump_program_to_console();
	basic_show_message("Dumped program to Console");	 
 }
 else {
    // Handle character input with repeat
    handle_character_input();
 }
 
  // In Step Event
 if (message_timer > 0) {
    message_timer--;
    if (message_timer <= 0) {
        message_text = "";
    }
 }
 
/*  // Add to Step event
 if (drag_enabled && drag_files > 0) {
    var file_path = drag_file[0];
    if (string_pos(".bas", string_lower(file_path)) > 0) {
        // Extract filename without path and extension
        var filename_start = 1;
        for (var i = string_length(file_path); i >= 1; i--) {
            if (string_char_at(file_path, i) == "/" || string_char_at(file_path, i) == "\\") {
                filename_start = i + 1;
                break;
            }
        }
        var full_filename = string_copy(file_path, filename_start, string_length(file_path));
        var dot_pos = string_pos(".", full_filename);
        var filename = string_copy(full_filename, 1, dot_pos - 1);
        
        load_program_from_path(file_path, filename);
    }
    drag_clear();
 }

*/

/// @description obj_basic_interpreter Draw interpreter output and current input
draw_set_font(fnt_basic);

// === BACKGROUND === //
if (global.background_draw_enabled) {
    draw_set_color(global.background_draw_color);
    draw_rectangle(0, 0, room_width, room_height, false);
}

var font_height = string_height("A");
var visible_lines = floor(room_height / font_height) - 2;
var total_lines = ds_list_size(global.output_lines) + (global.awaiting_input ? 1 : 0);

// === SCROLL MANAGEMENT === //
if (!global.scroll_lock && global.interpreter_running && !global.awaiting_input && !global.program_has_ended) {
    global.scroll_offset = max(0, total_lines - visible_lines);
}
global.scroll_offset = clamp(global.scroll_offset, 0, max(0, total_lines - visible_lines));

// === OUTPUT TEXT === //
var y1 = 0;
for (var i = global.scroll_offset; i < ds_list_size(global.output_lines); i++) {
    var col = (i < ds_list_size(global.output_colors)) ? global.output_colors[| i] : global.basic_text_color;
    draw_set_color(col);
    draw_text(16, y1, global.output_lines[| i]);
    y1 += font_height;
}

// === INPUT LINE OR PAUSE === //
if (global.awaiting_input) {
    draw_set_color(global.basic_text_color);
    var input_str = "";

    if (global.input_expected) {
        // We're in INPUT mode
        input_str = "? " + global.interpreter_input;
    } else {
        // We're in PAUSE mode
        input_str = global.interpreter_input;

        var curr_color = draw_get_color();
        var txt = "PAUSED...";
        var xx = room_width div 2;
        var yy = room_height div 2;

        draw_set_color(c_black);
        draw_text(xx - 1, yy - 1, txt);
        draw_text(xx + 1, yy - 1, txt);
        draw_text(xx - 1, yy + 1, txt);
        draw_text(xx + 1, yy + 1, txt);

        draw_set_color(c_yellow);
        draw_text(xx, yy, txt);

        draw_set_color(curr_color);
    }

    if (current_time mod 1000 < 500) input_str += "|";
    draw_text(16, y1, input_str);
    y1 += font_height;
}

// === END MESSAGE === //
if (global.program_has_ended) {
    draw_set_color(c_lime);
    draw_text(16, y1 + 16, "Program has ended - ESC or ENTER to return");
}

/// @description Insert description here
// You can write your code in this editor
 // In Draw Event
 draw_set_font(fnt_basic); // Create a monospace font
 draw_set_color(make_color_rgb(255, 191, 64));  // Classic green text
 draw_rectangle_color(0, 0, room_width, room_height, c_black, c_black, c_black, c_black, false);
 
 if (showing_dir_overlay) {
    draw_set_color(c_black);
    draw_rectangle(0, 0, room_width, room_height, false);

    draw_set_color(c_lime); // or whatever your readable text color is
    draw_set_font(fnt_basic); // or whatever font you use

    var col_count = 3;
    var row_height = font_height;
    var col_width = room_width div col_count;
    var x_pad = 16;
    var y_pad = 16;

    for (var i = 0; i < array_length(dir_listing); i++) {
        var col = i mod col_count;
        var row = i div col_count;

        var _x = x_pad + col * col_width;
        var _y = y_pad + row * row_height;

        draw_text(_x, _y, dir_listing[i]);
    }

    draw_text(x_pad, room_height - 32, "Press ENTER or ESC to close");

    return; // skip rest of Draw so editor doesn't draw underneath
}

 
 
 
 
 
 // Draw program lines
 var y_pos = 32;
 var lines_shown = 0;
 var total_lines = ds_list_size(global.line_numbers);
 for (var i = display_start_line; i < total_lines && lines_shown < lines_per_screen; i++) {
    var line_num = ds_list_find_value(global.line_numbers, i);
    var code = ds_map_find_value(global.program_lines, line_num);
    var display_text = string(line_num) + " " + code;
    
    draw_text(16, y_pos, display_text);
    y_pos += font_height;
    lines_shown++;
 }
 // Draw input prompt
 draw_text(16, room_height - 64, "READY");
 draw_text(16, room_height - 32, "> " + current_input);
 // Draw cursor
 var cursor_x = 16 + string_width("> " + string_copy(current_input, 1, cursor_pos));
 if (current_time % 1000 < 500) { // Blinking cursor
    draw_text(cursor_x, room_height - 32, "_");
 }
 
 // In Draw Event (add to display code)
 if (message_text != "") {
    draw_set_color(c_yellow);
    draw_text(16, room_height - 96, message_text);
    draw_set_color(c_green);
 }
 
 
function basic_cmd_while(arg) {
    var condition = string_upper(arg);
    show_debug_message("WHILE: Raw condition string: '" + condition + "'");

    var value = basic_evaluate_condition(condition);

    show_debug_message("WHILE: Evaluated result of '" + condition + "' → " + string(value));

    if (!value) {
        show_debug_message("WHILE: Condition is FALSE — skipping ahead to matching WEND");
        var _depth = 1;

        for (var i = line_index + 1; i < ds_list_size(global.line_list); i++) {
            var _ln = ds_list_find_value(global.line_list, i);
            var code = ds_map_find_value(global.program_map, _ln);
            var cmd = string_upper(string_trim(string_copy(code, 1, string_pos(" ", code + " ") - 1)));

            show_debug_message("WHILE: Inspecting line " + string(_ln) + " → Command: " + cmd);

            if (cmd == "WHILE") _depth++;
            if (cmd == "WEND") _depth--;

            if (_depth == 0) {
                show_debug_message("WHILE: Found matching WEND at line index " + string(i) + ", line " + string(_ln));
                global.interpreter_next_line = i;
                return;
            }
        }

        show_debug_message("?WHILE ERROR: No matching WEND found — control flow may break");
    } else {
        show_debug_message("WHILE: Condition is TRUE — evaluating stack push logic");

        // Ensure stack exists
        if (!ds_exists(global.while_stack, ds_type_stack)) {
            global.while_stack = ds_stack_create();
            show_debug_message("WHILE: Created new while_stack");
        }

        // Only push if not already at top
        if (ds_stack_empty(global.while_stack) || ds_stack_top(global.while_stack) != line_index) {
            ds_stack_push(global.while_stack, line_index);
            show_debug_message("WHILE: Pushed line_index " + string(line_index) + " onto while_stack");
        } else {
            show_debug_message("WHILE: Stack already contains this line_index at top — skipping push");
        }

        // Ensure interpreter continues to next line
        global.interpreter_next_line = -1;
    }
}

/// @script basic_cmd_color
/// @description Change text color (and optional background): COLOR fg[, bg]
function basic_cmd_color(arg) {
    // Split into up to two parts: foreground and optional background
    var parts = string_split(string_trim(arg), ",");
    var fgStr = string_upper(string_trim(parts[0]));
    var bgStr = (array_length(parts) > 1)
                ? string_upper(string_trim(parts[1]))
                : "";

    // Helper: parse a single color spec (named or RGB), returns -1 on error
    var parse_color = function(colSpec) {
        // RGB(r,g,b) form?
        if (string_copy(colSpec, 1, 4) == "RGB("
            && string_char_at(colSpec, string_length(colSpec)) == ")")
        {
            var inner = string_copy(colSpec, 5, string_length(colSpec) - 5);
            var comps = string_split(inner, ",");
            if (array_length(comps) == 3) {
                var r = clamp(real(string_trim(comps[0])), 0, 255);
                var g = clamp(real(string_trim(comps[1])), 0, 255);
                var b = clamp(real(string_trim(comps[2])), 0, 255);
                return make_color_rgb(r, g, b);
            } else {
                return -1;
            }
        }
        // Named color lookup
        if (ds_map_exists(global.colors, colSpec)) {
            return global.colors[? colSpec];
        }
        return -1;
    };

    // Parse and apply foreground
    var fgCol = parse_color(fgStr);
    if (fgCol >= 0) {
        global.basic_text_color   = fgCol;
        global.current_draw_color = fgCol;
    } else {
        show_debug_message("?COLOR ERROR: Unknown foreground color '" + fgStr + "'");
    }

    // Parse and apply background (if provided)
    if (bgStr != "") {
        var bgCol = parse_color(bgStr);
        if (bgCol >= 0) {
            global.background_draw_color   = bgCol;
            global.background_draw_enabled = true;
        } else {
            show_debug_message("?COLOR ERROR: Unknown background color '" + bgStr + "'");
        }
    }
}

function basic_cmd_clschar(arg) {
    show_debug_message("=== CLSCHAR DEBUG START ===");
    show_debug_message("Raw arg: '" + string(arg) + "'");
    
    var args = string_split(arg, ",");
    show_debug_message("Split args count: " + string(array_length(args)));
    for (var i = 0; i < array_length(args); i++) {
        show_debug_message("Arg[" + string(i) + "]: '" + string(args[i]) + "'");
    }

    var char_index = 0;
    var fg_color = c_white;
    var bg_color = c_black;

    if (array_length(args) >= 1) {
        char_index = real(string_trim(args[0]));
        show_debug_message("Parsed char_index: " + string(char_index));
    }

    if (array_length(args) >= 2) {
        var fg_str = string_upper(string_trim(args[1]));
        show_debug_message("Looking for fg color: '" + fg_str + "'");
        if (ds_map_exists(global.colors, fg_str)) {
            fg_color = global.colors[? fg_str];
            show_debug_message("Found fg color: " + string(fg_color));
        } else {
            show_debug_message("FG COLOR NOT FOUND!");
        }
    }

    if (array_length(args) >= 3) {
        var bg_str = string_upper(string_trim(args[2]));
        show_debug_message("Looking for bg color: '" + bg_str + "'");
        if (ds_map_exists(global.colors, bg_str)) {
            bg_color = global.colors[? bg_str];
            show_debug_message("Found bg color: " + string(bg_color));
        } else {
            show_debug_message("BG COLOR NOT FOUND!");
        }
    }

    var grid_obj = instance_find(obj_mode1_grid, 0);
    if (!instance_exists(grid_obj)) {
        show_debug_message("❌ CLSCHAR: No obj_mode1_grid found!");
    } else {
        show_debug_message("✅ CLSCHAR: Found grid obj - calling fill...");
        show_debug_message("Calling fill with: char=" + string(char_index) + ", fg=" + string(fg_color) + ", bg=" + string(bg_color));
        grid_obj.mode1_grid_fill(char_index, fg_color, bg_color);
    }
    show_debug_message("=== CLSCHAR DEBUG END ===");
}
function basic_cmd_bgcolor(arg) {
    var colstr = string_upper(string_trim(arg));
    show_debug_message("BGCOLOR: Raw argument: '" + arg + "', Normalized: '" + colstr + "'");
    
    var bg_color = c_black;
    var matched = false;

    // Look up named color
    if (ds_map_exists(global.colors, colstr)) {
        bg_color = global.colors[? colstr];
        matched = true;
        show_debug_message("BGCOLOR: Matched named color → " + string(bg_color));
    }
    // RGB() syntax
   else if (string_pos("RGB(", colstr) == 1) {
    var l = string_pos("(", colstr), r = string_last_pos(")", colstr);
    if (r > l) {
        var inner = string_copy(colstr, l + 1, r - l - 1);
        var parts = []; var buf = ""; var _depth = 0;
        for (var i = 1; i <= string_length(inner); i++) {
            var ch = string_char_at(inner, i);
            if (ch == "(") _depth++; else if (ch == ")") _depth--;
            if (ch == "," && _depth == 0) { array_push(parts, buf); buf = ""; } else buf += ch;
        }
        array_push(parts, buf);
        if (array_length(parts) == 3) {
            var rV = clamp(floor(basic_evaluate_expression_v2(string_trim(parts[0]))), 0, 255);
            var gV = clamp(floor(basic_evaluate_expression_v2(string_trim(parts[1]))), 0, 255);
            var bV = clamp(floor(basic_evaluate_expression_v2(string_trim(parts[2]))), 0, 255);
            bg_color = make_color_rgb(rV, gV, bV); matched = true;
        } else show_debug_message("BGCOLOR: Invalid RGB arg count in '" + inner + "'");
    } else show_debug_message("BGCOLOR: Missing ) in '" + colstr + "'");
}
 else {
        show_debug_message("BGCOLOR: No matching named color or RGB format found for '" + colstr + "'");
    }

    global.background_draw_color = bg_color;
    global.background_draw_enabled = (bg_color != c_black);

    show_debug_message("BGCOLOR: Final color set to " + string(bg_color) + ", background_draw_enabled: " + string(global.background_draw_enabled));
}

/// @function basic_array_set(name, idx, value)
/// @description Sets a value in a 1D array stored in global.basic_arrays (0-based indexing, auto-grows)
/// @param name  The name of the array (string)
/// @param idx   The index to set (0-based)
/// @param value The value to set
/// arrays v1 — 2025-08-08
/// 1D arrays backed by ds_list, 0-based, auto-grow, OOB reads return 0

function basic_array_set(_name, _idx, _val) {
    var nm = string_upper(string_trim(_name));
    show_debug_message("ARRAY_SET: Setting " + nm + "[" + string(_idx) + "] = " + string(_val));

    // Ensure the map entry exists and is a ds_list
    if (!ds_map_exists(global.basic_arrays, nm)) {
        show_debug_message("ARRAY_SET: Creating new ds_list for " + nm);
        global.basic_arrays[? nm] = ds_list_create();
    }

    var lst = global.basic_arrays[? nm];
    if (!ds_exists(lst, ds_type_list)) {
        show_debug_message("ARRAY_SET: Replacing non-list backing store for " + nm);
        lst = ds_list_create();
        global.basic_arrays[? nm] = lst;
    }

    // Normalize index
    var idx = floor(real(_idx)); // integer index (use floor to avoid +1 surprises near boundaries)

    // OPTIONAL: hard-stop on negative indexes (comment this out if you prefer silent ignore)
    if (idx < 0) {
        show_debug_message("ARRAY_SET ERROR: Negative index " + string(idx) + " for array " + nm);
        return;
    }

    // Grow to fit (fills with 0)
    while (ds_list_size(lst) <= idx) {
        ds_list_add(lst, 0);
        // OPTIONAL: verbose growth log (disable if noisy)
        // show_debug_message("ARRAY_SET: Growing " + nm + " to size " + string(ds_list_size(lst)));
    }

    // Assign
    ds_list_replace(lst, idx, _val);
    // OPTIONAL: confirmation log (disable if noisy)
    // show_debug_message("ARRAY_SET: Set " + nm + "[" + string(idx) + "] = " + string(_val));
}

function handle_interpreter_character_input(key) {
    // Printable ASCII characters
    if (key >= 32 && key <= 126) {
        var ch = keyboard_lastchar;

        global.interpreter_input = string_insert(ch, global.interpreter_input, global.interpreter_cursor_pos + 1);
        global.interpreter_cursor_pos += 1;
        return;
    }

    // BACKSPACE
    if (key == vk_backspace) {
        if (global.interpreter_cursor_pos > 0) {
            global.interpreter_input = string_delete(global.interpreter_input, global.interpreter_cursor_pos, 1);
            global.interpreter_cursor_pos -= 1;
        }
        return;
    }

    // SPACE
    if (key == vk_space) {
        global.interpreter_input = string_insert(" ", global.interpreter_input, global.interpreter_cursor_pos + 1);
        global.interpreter_cursor_pos += 1;
        return;
    }

    // LEFT arrow
    if (key == vk_left) {
        if (global.interpreter_cursor_pos > 0) {
            global.interpreter_cursor_pos -= 1;
        }
        return;
    }

    // RIGHT arrow
    if (key == vk_right) {
        if (global.interpreter_cursor_pos < string_length(global.interpreter_input)) {
            global.interpreter_cursor_pos += 1;
        }
        return;
    }

    // ENTER — finalize the input and resume execution
    if (key == vk_enter) {
        var val = global.interpreter_input;
        var varname = string_upper(global.input_target_var);

        // Store in variable map
        global.basic_variables[? varname] = val;

        // Echo to output
       // ds_list_add(output_lines, val);
       // ds_list_add(global.output_colors, global.current_draw_color);

        // Reset input state
        global.interpreter_input = "";
        global.awaiting_input = false;
        global.input_target_var = "";
        global.interpreter_cursor_pos = 0;
    }
}

// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
function handle_command(command) {
	
var original_command = string_trim(command);
    command = string_upper(original_command);
    
    // Split command from parameters to preserve case in filenames
    var space_pos = string_pos(" ", command);
    var cmd_word = "";
    var cmd_params = "";
    
    if (space_pos > 0) {
        cmd_word = string_copy(command, 1, space_pos - 1);
        cmd_params = string_trim(string_copy(original_command, space_pos + 1, string_length(original_command)));
    } else {
        cmd_word = command;
    }
    
    switch (cmd_word) {
        case "LIST":
            if (cmd_params == "") {
                list_program();
            } else {
                list_program_range(cmd_params);
            }
            break;
            
        case "RUN":
            run_program();
            break;
            
        case "NEW":
            new_program();
            break;
            
        case "SAVE":
            if (cmd_params == "") {
                save_program();
            } else {
                save_program_as(cmd_params);
            }
            break;
            
        case "LOAD":
            if (cmd_params == "") {
                show_error_message("FILENAME REQUIRED");
            } else {
                load_program_from(cmd_params);
            }
            break;
			
		case "DIR":
        list_saved_programs();
        break;

		case ":PASTE":
		editor_handle_paste_command();
		break;

		case "QUIT":
		quit_program()
		break;
			
        default:
            show_error_message("SYNTAX ERROR");
            break;
    }
 }
/// @description ob_mode1_grid Draw Event
//draw_sprite(spr_charactersheet,10,10,10);
var cols = 40;
var rows = 25;
var tile_w = 32;
var tile_h = 32;
var max_chars = sprite_get_number(spr_charactersheet);

if (global.grid_refresh_needed) {
    global.grid_refresh_needed = false;
    
    for (var row = 0; row < 25; row++) {
        for (var col = 0; col < 40; col++) {
            var i = col + row * 40;
            if (i < array_length(grid)) {
                grid[i].char = global.grid_refresh_char;
            }
        }
    }
}



for (var _y = 0; _y < rows; _y++) {
    for (var _x = 0; _x < cols; _x++) {
        var i = _x + _y * cols;
        if (i < array_length(grid)) {
            var tile = grid[i];
            
            // Draw background
            draw_set_color(tile.bg);
            draw_rectangle(_x * tile_w, _y * tile_h, (_x + 1) * tile_w, (_y + 1) * tile_h, false);
            
            // Draw foreground (sprite tint)
            draw_set_color(tile.fg);
            
            // ADD THESE LINES TO FORCE PROPER BLENDING:
            gpu_set_blendmode(bm_normal);
            draw_set_alpha(1.0);
            
            var subimg = clamp(tile.char, 0, max_chars - 1);
            
            // Draw character sprite
            draw_sprite_ext(global.active_font_sprite, subimg, _x * tile_w, _y * tile_h, 1, 1, 0, tile.fg, 1.0);
	//if (drewfont  < 5000) {show_debug_message(global.active_font_sprite);drewfont++;}
		//enable the following to debug
		//draw_text(_x * tile_w, _y * tile_h + tile_h - 12, string(tile.char));

		}
    }
}

// Reset draw state after the loop
draw_set_color(c_white);
gpu_set_blendmode(bm_normal);

//draw_text(10, 24, "Font: " + global.active_font_name);

function basic_cmd_wend() {
    show_debug_message("WEND: Entering handler...");

    if (!ds_exists(global.while_stack, ds_type_stack)) {
        show_debug_message("WEND: ERROR — while_stack does not exist");
        basic_show_message("WEND without matching WHILE");
        return;
    }

    if (ds_stack_empty(global.while_stack)) {
        show_debug_message("WEND: ERROR — while_stack is empty");
        basic_show_message("WEND without matching WHILE");
        return;
    }

    var while_line_index = ds_stack_top(global.while_stack); // Peek, do not pop yet
    show_debug_message("WEND: Top of while_stack is line index: " + string(while_line_index));

    var while_line_number = ds_list_find_value(global.line_list, while_line_index);
    var while_code = ds_map_find_value(global.program_map, while_line_number);
    show_debug_message("WEND: WHILE line " + string(while_line_number) + " code: '" + while_code + "'");

    var condition_str = string_trim(string_delete(while_code, 1, string_pos(" ", while_code)));
    show_debug_message("WEND: Extracted condition for re-evaluation: '" + condition_str + "'");

    var condition_value = basic_evaluate_condition(string_upper(condition_str));
    show_debug_message("WEND: Re-evaluated condition result: " + string(condition_value));

    if (condition_value) {
        show_debug_message("WEND: Condition is TRUE — setting line_index = " + string(while_line_index - 1));
        line_index = while_line_index - 1; // So next Step brings us back to WHILE
    } else {
        show_debug_message("WEND: Condition is FALSE — popping WHILE from stack");
        ds_stack_pop(global.while_stack);
    }
}

// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
 // Functions for input handling
 function handle_character_input() {
    var key_string = keyboard_string;
    
    // Robust keyboard handling with fallback
    if (key_string != last_keyboard_string) {
        var new_chars = string_copy(key_string, string_length(last_keyboard_string) + 1, 
                                   string_length(key_string) - string_length(last_keyboard_string));
        
        // Filter out control characters and validate input
        var filtered_chars = "";
        for (var i = 1; i <= string_length(new_chars); i++) {
            var char = string_char_at(new_chars, i);
            var char_code = ord(char);
            // Accept printable ASCII characters (32-126)
            if (char_code >= 32 && char_code <= 126) {
                filtered_chars += char;
            }
        }
        
        if (filtered_chars != "") {
            current_input = string_insert(filtered_chars, current_input, cursor_pos + 1);
            cursor_pos += string_length(filtered_chars);
        }
        
        last_keyboard_string = key_string;
    }
    
    // Fallback: Direct key detection for special cases
  //  if (keyboard_check_pressed(vk_space)) {
        // Ensure space is captured even if keyboard_string fails
  //      if (string_char_at(current_input, cursor_pos + 1) != " ") {
   //         current_input = string_insert(" ", current_input, cursor_pos + 1);
   //         cursor_pos++;
   //     }
   // }
 }

function basic_cmd_pset(arg) {
    var args = string_split(arg, ",");
    if (array_length(args) < 5) {
        show_debug_message("PSET requires 5 arguments: x, y, char, fg, bg");
        return;
    }
    
    // Evaluate expressions for x, y, and char (they might be variables or expressions)
    var x_val = real(basic_evaluate_expression_v2(string_trim(args[0])));
    var y_val = real(basic_evaluate_expression_v2(string_trim(args[1])));
    var char_index = real(basic_evaluate_expression_v2(string_trim(args[2])));
    
    var fg_str = string_upper(string_trim(args[3]));
    var bg_str = string_upper(string_trim(args[4]));
    
    var fg_color = ds_map_exists(global.colors, fg_str) ? global.colors[? fg_str] : c_white;
    var bg_color = ds_map_exists(global.colors, bg_str) ? global.colors[? bg_str] : c_black;
    
    var grid_obj = instance_find(obj_mode1_grid, 0);
    if (instance_exists(grid_obj)) {
        var cols = 40;
        var rows = 25;
        if (x_val >= 0 && x_val < cols && y_val >= 0 && y_val < rows) {
            var index = x_val + y_val * cols;
            grid_obj.grid[index].char = char_index;
            grid_obj.grid[index].fg = fg_color;
            grid_obj.grid[index].bg = bg_color;
            show_debug_message("PSET: Set tile at (" + string(x_val) + "," + string(y_val) + ") to char=" + string(char_index));
        } else {
            show_debug_message("PSET: coordinates out of bounds: (" + string(x_val) + "," + string(y_val) + ")");
        }
    } else {
        show_debug_message("PSET: No grid object found");
    }
}
/// @script basic_cmd_gosub
/// @description Handle GOSUB line-number jumps, stripping inline comments
function basic_cmd_gosub(arg) {
    // 1) Strip off anything after a ':' (inline comment or extra code)
    var raw = string_trim(arg);
    var colonPos = string_pos(":", raw);
    if (colonPos > 0) {
        raw = string_trim(string_copy(raw, 1, colonPos - 1));
        show_debug_message("GOSUB: Stripped argument to '" + raw + "'");
    }

    // 2) Parse the target line number
    var target = real(raw);
    show_debug_message("GOSUB: Target line requested: " + string(target));

    // 3) Push return point (the *next* line index) onto the gosub stack
    var return_index = line_index + 1;
    ds_stack_push(global.gosub_stack, return_index);
    show_debug_message("GOSUB: Pushed return index: " + string(return_index));

    // 4) Find the target in the sorted line_list
    global.interpreter_next_line = -1;
    var listSize = ds_list_size(global.line_list);
    for (var i = 0; i < listSize; i++) {
        if (ds_list_find_value(global.line_list, i) == target) {
            global.interpreter_next_line = i;
            show_debug_message("GOSUB: Found target line at index " + string(i));
            break;
        }
    }

    // 5) Error if not found
    if (global.interpreter_next_line == -1) {
        show_debug_message("GOSUB: ERROR — Target line " + string(target) + " not found");
        basic_show_error_message("GOSUB target line not found: " + string(target));
        global.interpreter_running = false;
    }
}

/// @description Insert description here
// You can write your code in this editor
 // Program storage


 // Input handling
 current_input = "";               // Current line being typed
 cursor_pos = 0;                  // Text cursor position


 input_buffer = "";               // Buffer for key repeat handling
 // Display variables
 display_start_line = 0;          // For scrolling through program
 lines_per_screen = 20;           // How many lines to show
 font_height = 16;                // Adjust based on your font
 screen_width = room_width;
 screen_height = room_height;
 // Syntax highlighting settings
 syntax_highlighting = true;      // Toggle for syntax highlighting
 keyword_color = c_blue;          // Color for BASIC keywords
 text_color = c_green;            // Default text color
 number_color = c_yellow;         // Color for line numbers
 // State management
 editor_mode = "READY";           // States: "READY", "INPUT", "RUNNING"
 current_filename = "";           // For save/load operations
 // Keyboard handling
 last_keyboard_string = "";       // Track keyboard_string changes
 key_repeat_timer = 0;            // For handling key repeat timing
 // Undo system

 max_undo_levels = 20;            // Limit undo history
 // Message system
 message_text = "";
 message_timer = 0;
 
 drag_enabled = true;
 //show_debug_message("Working directory: " + working_directory);
keyboard_string = "";

//for directory listings
showing_dir_overlay = false;
dir_listing = [];


function basic_system_message(_msg, _color) {
    show_debug_message("=== basic_system_message START ===");
    show_debug_message("Incoming message: " + string(_msg));
    show_debug_message("Incoming color arg: " + string(_color));

    // Do NOT create here — run_program owns creation.
    if (is_undefined(global.output_lines) || !ds_exists(global.output_lines, ds_type_list)
    ||  is_undefined(global.output_colors) || !ds_exists(global.output_colors, ds_type_list)) {
        show_debug_message("basic_system_message: output buffers not initialized; SKIPPING write.");
        show_debug_message("=== basic_system_message END (skipped) ===");
        return;
    }

    var wrap_width = 40; // keep in sync with PRINT path
    var col = is_undefined(_color) ? global.current_draw_color : _color;
    show_debug_message("Using color: " + string(col));

    var text = string(_msg);
    show_debug_message("Wrapping text: " + text);

    while (string_length(text) > wrap_width) {
        var chunk = string_copy(text, 1, wrap_width);
        show_debug_message("Adding wrapped chunk: '" + chunk + "'");
        ds_list_add(global.output_lines, chunk);
        ds_list_add(global.output_colors, col);
        text = string_delete(text, 1, wrap_width);
    }

    show_debug_message("Adding final remainder: '" + text + "'");
    ds_list_add(global.output_lines, text);
    ds_list_add(global.output_colors, col);

    show_debug_message("=== basic_system_message END ===");
}

// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
function load_program_from_path(file_path, filename) {
    if (!file_exists(file_path)) {
        show_error_message("DRAG FILE NOT FOUND");
        return;
    }
    
    try {
        save_undo_state();
        new_program_without_undo();
        
        var file = file_text_open_read(file_path);
        while (!file_text_eof(file)) {
            var line = file_text_read_string(file);
            file_text_readln(file);
            
            if (string_trim(line) != "") {
                var space_pos = string_pos(" ", line);
                if (space_pos > 0) {
                    var line_num_str = string_copy(line, 1, space_pos - 1);
					                    var line_num = real(line_num_str);
                    var code_content = string_copy(line, space_pos + 1, string_length(line));
                    
                    if (is_line_number(line_num_str) && is_valid_line_number(line_num)) {
                        ds_map_set(global.program_lines, line_num, code_content);
                        insert_line_number_ordered(line_num);
                    }
                }
            }
        }
        file_text_close(file);
        current_filename = filename;
        basic_show_message("LOADED via DRAG: " + filename);
        update_display();
    } catch (e) {
        show_error_message("DRAG LOAD ERROR");
    }
 }
function basic_wrap_and_commit(_text, _color) {
    show_debug_message("=== basic_wrap_and_commit START ===");
    show_debug_message("Incoming text: " + string(_text));
    show_debug_message("Incoming color: " + string(_color));

    // Do NOT create here — avoid nuking prior output!
    if (is_undefined(global.output_lines) || !ds_exists(global.output_lines, ds_type_list)
    ||  is_undefined(global.output_colors) || !ds_exists(global.output_colors, ds_type_list)) {
        show_debug_message("basic_wrap_and_commit: output buffers not initialized; SKIPPING write.");
        show_debug_message("=== basic_wrap_and_commit END (skipped) ===");
        return;
    }

    var wrap_width = 40;
    var remaining = string(_text);
    show_debug_message("Initial remaining text: " + remaining);

    while (string_length(remaining) > wrap_width) {
        var line = string_copy(remaining, 1, wrap_width);
        show_debug_message("Adding wrapped line: '" + line + "'");
        ds_list_add(global.output_lines, line);
        ds_list_add(global.output_colors, _color);
        remaining = string_copy(remaining, wrap_width + 1, string_length(remaining) - wrap_width);
        show_debug_message("Remaining after wrap: '" + remaining + "'");
    }

    show_debug_message("Adding final line: '" + remaining + "'");
    ds_list_add(global.output_lines, remaining);
    ds_list_add(global.output_colors, _color);

    show_debug_message("=== basic_wrap_and_commit END ===");
}

/// @function basic_array_get(name, idx)
/// @description Retrieves a value from a 1D array stored in global.basic_arrays (0-based indexing)
/// @param name The name of the array (string)
/// @param idx  The index to access (0-based)
/// arrays v1 — 2025-08-08
/// 1D arrays backed by ds_list, 0-based, auto-grow, OOB reads return 0

function basic_array_get(_name, _idx) {
    var nm = string_upper(string_trim(_name));
    show_debug_message("ARRAY_GET: Accessing " + nm + "[" + string(_idx) + "]");

    // Must exist in the map
    if (!ds_map_exists(global.basic_arrays, nm)) {
        show_debug_message("ARRAY_GET ERROR: Array '" + nm + "' does not exist");
        return 0;
    }

    // Must be a valid ds_list handle
    var lst = global.basic_arrays[? nm];
    if (!ds_exists(lst, ds_type_list)) {
        show_debug_message("ARRAY_GET ERROR: '" + nm + "' is not a ds_list");
        return 0;
    }

    // Normalize index
    var idx = floor(real(_idx)); // use floor; indices are 0..N-1

    // Bounds check
    var n = ds_list_size(lst);
    if (idx < 0 || idx >= n) {
        show_debug_message("ARRAY_GET ERROR: Index " + string(idx) + " out of bounds for " + nm + " (size=" + string(n) + ")");
        return 0;
    }

    // Fetch
    var value = ds_list_find_value(lst, idx);
    // OPTIONAL: verbose log (comment out if noisy)
    // show_debug_message("ARRAY_GET: " + nm + "[" + string(idx) + "] = " + string(value));
    return value;
}

function tokenize_expression(expr) {
    var tokens = [];
    var i = 1;
    while (i <= string_length(expr)) {
        var ch = string_char_at(expr, i);

        if (ch == " " || ch == "\t") {
            i++;
            continue;
        }

        if (ch == "+" || ch == "-" || ch == "*" || ch == "/" || ch == "^" || ch == "(" || ch == ")") {
            array_push(tokens, ch);
            i++;
        }
        else if (ord(ch) >= 48 && ord(ch) <= 57) {
            var num = "";
            while (i <= string_length(expr) && (ord(string_char_at(expr, i)) >= 48 && ord(string_char_at(expr, i)) <= 57)) {
                num += string_char_at(expr, i);
                i++;
            }
            array_push(tokens, num);
        }
        else if (is_letter(ch)) {
            var ident = "";
            while (i <= string_length(expr) && (is_letter_or_digit(string_char_at(expr, i)))) {
                ident += string_char_at(expr, i);
                i++;
            }
            if (string_char_at(expr, i) == "(") {
                array_push(tokens, ident); // Function name
            } else {
                array_push(tokens, ident); // Variable
            }
        }
        else if (ch == ",") {
            array_push(tokens, ",");
            i++;
        }
        else {
            show_debug_message("Unknown character in expression: " + ch);
            i++;
        }
    }

    return tokens;
}


/// @script basic_cmd_input
/// @description Prompt the user with a text and await input into a variable
function basic_cmd_input(arg) {
    // 1) Split on the first comma → [ promptText , varName ]
    var commaPos = string_pos(",", arg);
    var rawPrompt, varName;
    if (commaPos > 0) {
        rawPrompt = string_trim(string_copy(arg, 1, commaPos - 1));
        varName   = string_upper(string_trim(string_copy(arg, commaPos + 1, string_length(arg))));
    } else {
        rawPrompt = "";
        varName   = string_upper(string_trim(arg));
    }

	  // 2) Strip surrounding quotes from prompt
	if (string_length(rawPrompt) >= 2
	    && string_char_at(rawPrompt, 1) == "\""
	    && string_char_at(rawPrompt, string_length(rawPrompt)) == "\"")
	{
	    rawPrompt = string_copy(rawPrompt, 2, string_length(rawPrompt) - 2);
	}
	
    // 3) Display the prompt text on the interpreter screen
    if (rawPrompt != "") {
        ds_list_add(global.output_lines, rawPrompt);
        ds_list_add(global.output_colors, global.basic_text_color);
    }

	// 4) Seed the variable to "0" so we never get an empty string in expression evaluation
	global.basic_variables[? varName] = "0";

	// 5) Enter input mode
	global.awaiting_input   = true;
	global.pause_mode       = false;
	global.input_target_var = varName;
	show_debug_message("INPUT: Awaiting input for variable " + varName);

}

/// @function basic_array_init(name, size)
/// @description Initializes a 1D array as a ds_list in global.basic_arrays
/// @param name The name of the array (string)
/// @param size The size of the array (number of elements)
/// arrays v1 — 2025-08-08
/// 1D arrays backed by ds_list, 0-based, auto-grow, OOB reads return 0

function basic_array_init(_name, _size) {
    var nm = string_upper(string_trim(_name));
    show_debug_message("ARRAY_INIT: Initializing " + nm + " with size " + string(_size));

    // If the array already exists, destroy its backing list
    if (ds_map_exists(global.basic_arrays, nm)) {
        show_debug_message("ARRAY_INIT WARNING: Array '" + nm + "' already exists, destroying");
        var old_lst = global.basic_arrays[? nm];
        if (ds_exists(old_lst, ds_type_list)) {
            ds_list_destroy(old_lst);
        }
        ds_map_delete(global.basic_arrays, nm);
    }

    // Normalize and validate size
    var sz = floor(real(_size));
    if (sz < 0) {
        show_debug_message("ARRAY_INIT ERROR: Invalid size " + string(sz) + " for " + nm);
        return;
    }

    // Create and fill
    var lst = ds_list_create();
    repeat (sz) {
        ds_list_add(lst, 0);
    }
    global.basic_arrays[? nm] = lst;

    show_debug_message("ARRAY_INIT: Created " + nm + " with size " + string(ds_list_size(lst)));
}

function editor_handle_paste_command() {
    var raw_clip = clipboard_get_text();
    if (string_length(raw_clip) <= 0) {
        show_message("Clipboard is empty.");
        return;
    }

    var lines = string_split(raw_clip, "\n");

    for (var i = 0; i < array_length(lines); i++) {
        var line = string_trim(lines[i]);

        if (string_length(line) == 0) continue;

        // Expect format: line_number followed by space and code
        var space_pos = string_pos(" ", line);
        if (space_pos > 0) {
            var line_num_str = string_copy(line, 1, space_pos - 1);
            var code_str = string_copy(line, space_pos + 1, string_length(line) - space_pos);

            // ✅ Only proceed if line_num_str is a valid number
            if (string_digits(line_num_str) == line_num_str) {
                var line_num = real(line_num_str);

                if (line_num > 0 && string_length(code_str) > 0) {
                    ds_map_replace(global.program_lines, line_num, code_str);

                    if (!ds_list_find_index(global.line_numbers, line_num)) {
                        ds_list_add(global.line_numbers, line_num);
                        ds_list_sort(global.line_numbers, true);
                    }
                }
            }
        }
    }

    basic_show_message("Program pasted successfully.");
}

function load_program_from(filename) {
    var file_path = working_directory + filename + ".bas";
    if (!file_exists(file_path)) {
        basic_show_error_message("FILE NOT FOUND: " + filename);
        return;
    }

    // clear current program
    new_program(); // use your existing clear function

    var file = file_text_open_read(file_path);
    if (file == -1) {
        basic_show_error_message("COULD NOT OPEN FILE: " + filename);
        return;
    }

    while (!file_text_eof(file)) {
        var line = file_text_read_string(file);
        file_text_readln(file);

        line = string_trim(line);
        if (line != "") {
            var space_pos = string_pos(" ", line);
            if (space_pos > 0) {
                var line_num_str = string_copy(line, 1, space_pos - 1);
                var code_content = string_copy(line, space_pos + 1, string_length(line));
                var line_num = real(line_num_str);

                if (is_line_number(line_num_str)) {
                    ds_map_set(global.program_lines, line_num, code_content);
                    insert_line_number_ordered(line_num);
                }
            }
        }
    }
    file_text_close(file);
    current_filename = filename;
    basic_show_message("LOADED: " + filename);
    update_display();
}

function save_undo_state() {
    // Placeholder for undo system
    // Eventually, you could push a copy of global.program_lines to a stack
	/// TODO: Implement undo functionality for BASIC editor
/// --------------------------------------------------
/// This function should snapshot the current program state so it can be restored later via an "UNDO" command.
/// A stack-based approach is recommended, where each saved state is pushed onto a list (e.g., global.undo_stack).
///
/// Suggested structure per snapshot:
/// - A ds_map with keys like "global.program_lines", "global.line_numbers", and optionally "cursor_pos"
/// - Each key maps to a *copy* (not a reference) of the original ds_map or ds_list
///
/// Pseudocode for future implementation:
/// ```gml
/// var snapshot = ds_map_create();
/// ds_map_add_list(snapshot, "global.line_numbers", ds_list_copy(global.line_numbers));
/// ds_map_add_map(snapshot, "global.program_lines", ds_map_copy(global.program_lines));
/// ds_stack_push(global.undo_stack, snapshot);
/// ```
///
/// Don't forget to:
/// - Create `global.undo_stack` once during initialization (e.g., in obj_globals)
/// - Clean up with `ds_map_destroy()` and `ds_list_destroy()` when popping or discarding states
///
/// For now, this is a placeholder to suppress runtime errors.

}

/// @desc Saves the current program to a .bas file
/// @param filename The filename to save as (without extension)
function save_program_as(filename) {
    // Trim spaces
    filename = string_trim(filename);

    // Remove surrounding quotes if present
    if (string_length(filename) >= 2) {
        var first = string_char_at(filename, 1);
        var last  = string_char_at(filename, string_length(filename));
        if ((first == "\"" || first == "'") && first == last) {
            filename = string_copy(filename, 2, string_length(filename) - 2);
        }
    }

    var file_path = working_directory + filename + ".bas";
    var file = file_text_open_write(file_path);
    if (file == -1) {
        show_error_message("COULD NOT OPEN FILE: " + filename);
        return;
    }

    var count = ds_list_size(global.line_numbers);
    for (var i = 0; i < count; i++) {
        var line_num = ds_list_find_value(global.line_numbers, i);
        var code     = ds_map_find_value(global.program_lines, line_num);
        file_text_write_string(file, string(line_num) + " " + code);
        file_text_writeln(file);
    }

    file_text_close(file);
    current_filename = filename;
    basic_show_message("SAVED: " + filename + " (working_directory)");
}

function basic_cmd_font(arg) {
    if (global.current_mode < 1) {
        basic_print_system_message("FONT not implemented in MODE " + string(global.current_mode));
        return;
    }

    var fontname = string_upper(string_trim(arg));

    // Remove surrounding quotes if user used them
    if (string_length(fontname) >= 2) {
        var first = string_char_at(fontname, 1);
        var last  = string_char_at(fontname, string_length(fontname));
        if ((first == "\"" || first == "'") && first == last) {
            fontname = string_copy(fontname, 2, string_length(fontname) - 2);
        }
    }

    if (ds_map_exists(global.font_sheets, fontname)) {
        global.active_font_name = fontname;
        global.active_font_sprite = global.font_sheets[? fontname];
 
		show_debug_message("Font set to: " + fontname + " " + " global.active_font_sprite: " + string( global.active_font_sprite));

		global.grid_refresh_needed = true; // re-blank the screen using current font’s subimage 32
		show_debug_message("Cleared Screen after font change");
	} else {
        // Call with direct string, avoid expression parsing
        basic_cmd_print("FONT " + fontname + " not found", false);
    }
}

function basic_evaluate_expression(expr) {
    expr = string_trim(expr);

    // Variable lookup
    if (ds_map_exists(global.basic_variables, string_upper(expr))) {
        return global.basic_variables[? string_upper(expr)];
    }

    // Handle MOD
    if (string_pos("MOD", string_upper(expr)) > 0) {
        var parts = string_split(string_upper(expr), "MOD");
        if (array_length(parts) == 2) {
            var a = real(basic_evaluate_expression_v2(parts[0]));
            var b = real(basic_evaluate_expression_v2(parts[1]));
            return a mod b;
        }
    }

    // Handle RND(n)
    if (string_upper(string_copy(expr, 1, 4)) == "RND(" && string_char_at(expr, string_length(expr)) == ")") {
        var inner = string_copy(expr, 5, string_length(expr) - 5);
        return irandom(real(basic_evaluate_expression_v2(inner)));
    }

    // Handle ABS(x)
    if (string_upper(string_copy(expr, 1, 4)) == "ABS(" && string_char_at(expr, string_length(expr)) == ")") {
        var inner = string_copy(expr, 5, string_length(expr) - 5);
        return abs(real(basic_evaluate_expression_v2(inner)));
    }

    // Fallback to real()
    return real(expr);
}

// @description obj_mode1_grid Create Event
//Create 40x25 grid for 32x32 character tiles
grid_cols = 40;
grid_rows = 25;
tile_width = 32;
tile_height = 32;

grid = array_create(grid_cols * grid_rows);

// Each grid cell will be a struct:
function make_tile_struct(char = 32, fg = c_white, bg = c_black) {
    return { char: char, fg: fg, bg: bg };
}

// Initialize all tiles
for (var i = 0; i < array_length(grid); i++) {
    grid[i] = make_tile_struct();
}

self.mode1_grid_fill = function(char, fg, bg) {
    show_debug_message(">> GRID FILL START: char=" + string(char) + ", fg=" + string(fg) + ", bg=" + string(bg));
    show_debug_message(">> Grid array length: " + string(array_length(grid)));
    
    for (var i = 0; i < array_length(grid); i++) {
        grid[i].char = char;
        grid[i].fg = fg;
        grid[i].bg = bg;
    }
    
    // Check first few tiles to verify they were set
    for (var i = 0; i < 3; i++) {
        show_debug_message(">> Tile[" + string(i) + "]: char=" + string(grid[i].char) + ", fg=" + string(grid[i].fg) + ", bg=" + string(grid[i].bg));
    }
    show_debug_message(">> GRID FILL END");
}

drewfont = 0;//temp var


// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
function load_program_json(filename) {
    var file_path = working_directory + filename + ".json";
    
    if (!file_exists(file_path)) {
        show_error_message("JSON FILE NOT FOUND");
        return;
    }
    
    try {
        var file = file_text_open_read(file_path);
        var json_string = file_text_read_string(file);
        file_text_close(file);
        
        var loaded_map = json_decode(json_string);
        
        new_program();
        ds_map_copy(global.program_lines, loaded_map);
        
        // Rebuild line numbers list
        var key = ds_map_find_first(global.program_lines);
        while (!is_undefined(key)) {
            insert_line_number_ordered(real(key));
            key = ds_map_find_next(global.program_lines, key);
        }
        
        ds_map_destroy(loaded_map);
        basic_show_message("LOADED JSON: " + filename);
        update_display();
    } catch (e) {
        show_error_message("JSON LOAD ERROR");
    }
 }
function basic_cmd_printat(arg) {
    // arg: x,y,"string",fgcolor,bgcolor
    var args = basic_parse_csv_args(arg);
    if (array_length(args) < 3) {
        show_debug_message("PRINTAT ERROR: Not enough arguments.");
        return;
    }

    var _x = basic_evaluate_expression_v2(args[0]);
    var _y = basic_evaluate_expression_v2(args[1]);
    var str = string(args[2]); // keep quotes if present
    var fg = (array_length(args) > 3) ? basic_parse_color(args[3]) : c_white;
    var bg = (array_length(args) > 4) ? basic_parse_color(args[4]) : c_black;

    // Remove quotes from string if present
    if (string_length(str) >= 2 && string_char_at(str, 1) == "\"" && string_char_at(str, string_length(str)) == "\"") {
        str = string_copy(str, 2, string_length(str) - 2);
    }

    for (var i = 0; i < string_length(str); i++) {
        var ch = ord(string_char_at(str, i + 1));
        mode1_grid_set(_x + i, _y, ch, fg, bg);
    }

    show_debug_message("PRINTAT → (" + string(_x) + "," + string(_y) + ") = '" + str + "'");
}

/// @script basic_cmd_else
/// @description Handle ELSE in a structured IF…ELSEIF…ELSE…ENDIF
function basic_cmd_else() {
    show_debug_message("ELSE START");
    // ← GUARD: must have an open IF
    if (ds_stack_empty(global.if_stack)) {
        show_debug_message("?ELSE ERROR: ELSE without matching IF");
        return;
    }
	
    var frame = ds_stack_top(global.if_stack);
    var taken = frame[? "takenBranch"];

    var current_index = global.interpreter_current_line_index;
    var endifIx = frame[? "endifIndex"];

    if (taken) {
        // Already ran IF or an ELSEIF → skip entire ELSE-block
        global.interpreter_next_line = endifIx;
        show_debug_message("ELSE skipping to ENDIF at index " + string(endifIx));
    } else {
        // No branch yet taken → run ELSE body
        ds_map_replace(frame, "takenBranch", true);
        global.interpreter_next_line = current_index + 1;
        show_debug_message("ELSE entering branch at index " + string(global.interpreter_next_line));
    }
}

/// @function basic_cmd_goto(arg)
/// @description Sets the program counter to a new line number if it exists.
function basic_cmd_goto(arg) {
    show_debug_message("GOTO START — Raw arg: '" + arg + "'");

    var trimmed_arg = string_trim(arg);
    var target_line = real(trimmed_arg);

    show_debug_message("GOTO: Parsed target line number: " + string(target_line));

    // Find the index in your line_list
    var index = -1;
	for (var i = 0; i < ds_list_size(global.line_list); i++) {
	    if (real(ds_list_find_value(global.line_list, i)) == target_line) {
	        index = i;
	        break;
	    }
	}

	
    if (index >= 0) {
        global.interpreter_next_line = index;
        show_debug_message("GOTO SUCCESS → Jumping to line " + string(target_line) + " (list index " + string(index) + ")");
    } else {
        show_debug_message("?GOTO ERROR: Line number " + string(target_line) + " not found in global.line_list");
    }
}

/// @function string_is_number(str)
/// @desc Returns true if the input string can be safely converted to a number.
/// @param {string} str - The string to check
function string_is_number(str) {
    if (is_real(str)) return true; // Already a number
    var trimmed = string_trim(str);
    if (trimmed == "") return false;

    var dot_found = false;
    var start = 1;

    // Allow for optional leading minus sign
    if (string_char_at(trimmed, 1) == "-") {
        if (string_length(trimmed) == 1) return false;
        start = 2;
    }

    for (var i = start; i <= string_length(trimmed); i++) {
        var ch = string_char_at(trimmed, i);
        if (ch >= "0" && ch <= "9") continue;
        else if (ch == ".") {
            if (dot_found) return false; // only one dot allowed
            dot_found = true;
        } else {
            return false;
        }
    }

    return true;
}

// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
function basic_cmd_charat(arg) {
    var args = string_split(arg, ",");

    if (array_length(args) < 3) {
        show_debug_message("CHARAT requires 3 arguments: x, y, char");
        return;
    }

    var _x = real(string_trim(args[0]));
    var _y = real(string_trim(args[1]));
    var char_index = real(string_trim(args[2]));

    var grid_obj = instance_find(obj_mode1_grid, 0);
    if (instance_exists(grid_obj)) {
        var cols = 40;
        var rows = 25;
        if (_x >= 0 && _x < cols && _y >= 0 && _y < rows) {
            var index = _x + _y * cols;
            grid_obj.grid[index].char = char_index;
        } else {
            show_debug_message("CHARAT: coordinates out of bounds.");
        }
    }
}

// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
function set_color_scheme(scheme) {
    scheme = string_upper(scheme);
    switch (scheme) {
        case "GREEN":
            keyword_color = c_lime;
            text_color = c_green;
            number_color = c_yellow;
            break;
        case "BLUE":
            keyword_color = c_cyan;
            text_color = c_blue;
            number_color = c_white;
            break;
        case "AMBER":
            keyword_color = c_orange;
            text_color = c_yellow;
            number_color = c_white;
            break;
        default:
            show_error_message("UNKNOWN COLOR SCHEME");
            return;
    }
    basic_show_message("COLOR SCHEME: " + scheme);
    update_display();
 }
/// @function split_on_unquoted_colons(line)
/// @description Split a line on top-level colons, ignoring any inside "quoted strings"
function split_on_unquoted_colons(line) {
    var parts = [];
    var buf    = "";
    var inStr  = false;
    var len    = string_length(line);
    for (var i = 1; i <= len; i++) {
        var ch = string_char_at(line, i);
        if (ch == "\"") {
            // toggle string state and keep the quote
            inStr = !inStr;
            buf  += ch;
        }
        else if (ch == ":" && !inStr) {
            // top-level colon → break here
            array_push(parts, buf);
            buf = "";
        }
        else {
            buf += ch;
        }
    }
    // push whatever’s left
    array_push(parts, buf);
    return parts;
}

// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
function process_input_line(input_text) {
    // Trim whitespace
    input_text = string_trim(input_text);
    
    if (input_text == "") return;
    
    // Check if line starts with a number
    var first_space = string_pos(" ", input_text);
    var potential_line_num = "";
    
    if (first_space > 0) {
        potential_line_num = string_copy(input_text, 1, first_space - 1);
    } else {
        potential_line_num = input_text;
    }
    
    // Check if it's a valid line number
    if (is_line_number(potential_line_num)) {
        handle_program_line(input_text);
    } else {
        handle_command(input_text);
    }
 }
function mode1_grid_set(col, row, char_index, fg, bg) {
    var grid_obj = instance_find(obj_mode1_grid, 0);
    if (!instance_exists(grid_obj)) {
        show_debug_message("mode1_grid_set: No grid object found.");
        return;
    }

    var cols = 40;
    var rows = 25;

    if (col >= 0 && col < cols && row >= 0 && row < rows) {
        var index = col + row * cols;
        grid_obj.grid[index].char = char_index;
        grid_obj.grid[index].fg = fg;
        grid_obj.grid[index].bg = bg;
        show_debug_message("mode1_grid_set: Set (" + string(col) + "," + string(row) + ") = " + string(char_index));
    } else {
        show_debug_message("mode1_grid_set: Coordinates out of bounds (" + string(col) + "," + string(row) + ")");
    }
}

/// obj_basic_interpreter → Create Event

// Set the current draw color
global.current_draw_color = global.basic_text_color;

// Use the shared global data structures
global.program_map  = global.basic_program; // optional if you're not modifying
global.line_list    = global.basic_line_numbers;

// Interpreter control variables
line_index = 0;                         // current line being executed
font_height = 16;

current_input = "";
cursor_pos = 0;
last_keyboard_string = "";

global.interpreter_current_line_index = 0;
global.interpreter_next_line = -1;

// Local list to hold current run if needed
interpreter_current_program = ds_list_create(); // OK to keep local

basic_run_to_console_flag = false;


// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
 function save_program_json(filename) {
    try {
        var save_data = ds_map_create();
        ds_map_copy(save_data, global.program_lines);
        
        var json_string = json_encode(save_data);
        var file_path = working_directory + filename + ".json";
        var file = file_text_open_write(file_path);
        file_text_write_string(file, json_string);
        file_text_close(file);
        
        ds_map_destroy(save_data);
        basic_show_message("SAVED: " + filename + " (JSON)");
    } catch (e) {
        show_error_message("JSON SAVE ERROR");
    }
 }
function safe_real_pop(stack) {
    if (array_length(stack) < 1) return 1;

    var raw = array_pop(stack);

    // Pass through real values
    if (is_real(raw)) return raw;

    // Try to convert string safely
    var str = string(raw);
    var tryval = real(str);

    if (is_nan(tryval)) {
        show_debug_message("? safe_real_pop: Cannot convert '" + string(raw) + "' to number. Returning 0.");
        return 0;
    }

    // Handle invalid conversions like real("RND:")
    if (!is_numeric_string(str)) {
        show_debug_message("? POSTFIX ERROR: Cannot convert to number: '" + str + "'");
        return 1; // or return 0 if you prefer a neutral fallback
    }

    return tryval;
}

function basic_parse_csv_args(str) {
    var args = [];
    var current = "";
    var in_quotes = false;
    var i = 1;
    var len = string_length(str);

    while (i <= len) {
        var c = string_char_at(str, i);

        if (c == "\"") {
            in_quotes = !in_quotes;
            current += c; // Preserve quote so later commands can detect strings
        }
        else if (c == "," && !in_quotes) {
            array_push(args, string_trim(current));
            current = "";
        }
        else {
            current += c;
        }

        i += 1;
    }

    if (string_length(current) > 0) {
        array_push(args, string_trim(current));
    }

    return args;
}

/// @script basic_cmd_endif
/// @description Handle ENDIF—pop IF-stack and continue
function basic_cmd_endif() {
  show_debug_message("ENDIF START");
    // ← GUARD: must have an open IF
    if (ds_stack_empty(global.if_stack)) {
        show_debug_message("?ENDIF ERROR: ENDIF without matching IF");
        return;
    }
    var frame = ds_stack_pop(global.if_stack);

    var current_index = global.interpreter_current_line_index;
    // Pop and destroy the frame

    ds_map_destroy(frame);

    // Continue immediately after ENDIF
    global.interpreter_next_line = current_index + 1;
    show_debug_message("ENDIF done, next index " + string(global.interpreter_next_line));
}

// SCRIPT: basic_stop_execution
function basic_stop_execution() {
    show_debug_message("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    show_debug_message("BASIC_STOP_EXECUTION CALLED!");
    show_debug_message("Call Stack:");
    show_debug_message(debug_get_callstack()); // THIS IS THE KEY!
    show_debug_message("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

    global.interpreter_running = false;
    global.awaiting_input = false;
    global.program_has_ended = true;

    // Clear input buffer if input was pending
    if (global.input_buffer != undefined && ds_list_exists(global.input_buffer, ds_type_list)) {
        ds_list_clear(global.input_buffer);
    }
}
function reset_interpreter_state() {
    global.interpreter_running = false;
    global.program_has_ended = false;
    global.awaiting_input = false;
    global.pause_in_effect = false;
    global.pause_mode = false;
    global.input_expected = false;
    global.interpreter_input = "";
    global.interpreter_cursor_pos = 0;
    global.last_interpreter_string = "";
    
    // Reset mode if needed
    if (global.current_mode != 0) {
        global.current_mode = 0;
        room_goto(rm_basic_interpreter);
    }
    
    // Clear any program execution state
    ds_stack_clear(global.gosub_stack);
    ds_stack_clear(global.for_stack);
    ds_stack_clear(global.while_stack);
}
// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
function list_program() {
    display_start_line = 0;
    update_display();
 }
 function list_program_range(range) {
    // Parse range like "10-50" or single number "10"
    var dash_pos = string_pos("-", range);
    if (dash_pos > 0) {
        var start_line = real(string_copy(range, 1, dash_pos - 1));
        var end_line = real(string_copy(range, dash_pos + 1, string_length(range)));
        list_between_lines(start_line, end_line);
    } else {
        var single_line = real(range);
        list_single_line(single_line);
    }
 }
/// @function basic_cmd_mode(arg)
/// @description Sets the mode and switches to the appropriate room
function basic_cmd_mode(arg) {
    var mode = real(string_trim(arg));
    if (!ds_map_exists(global.mode_rooms, mode)) {
        basic_show_message("Invalid MODE: " + string(mode));
        return;
    }

    if (mode == global.current_mode) {
        show_debug_message("MODE already set to " + string(mode) + "; no room switch needed.");
        return;
    }

    global.current_mode = mode;
    show_debug_message("Switching to MODE " + string(mode) + " → room: " + string(global.mode_rooms[? mode]));
    room_goto(global.mode_rooms[? mode]);
}

// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
function navigate_history_up() {
	
	if (global.justreturned == 1) return; // 🛑 Block history on return
	
    if (ds_list_size(global.input_history) > 0) {
        if (global.history_index == -1) {
            global.history_index = ds_list_size(global.input_history) - 1;
        } else {
            global.history_index = max(0, global.history_index - 1);
        }
        current_input = ds_list_find_value(global.input_history, global.history_index);
        cursor_pos = string_length(current_input);
    }
 }
function dump_program_to_console() {
    show_debug_message("==== BASIC PROGRAM DUMP ====");

    var lines = global.line_numbers; // numeric line numbers
    var prog = global.program_lines;

    for (var i = 0; i < ds_list_size(lines); i++) {
        var linenum = ds_list_find_value(lines, i); // numeric
        if (ds_map_exists(prog, linenum)) {
            var code = ds_map_find_value(prog, linenum);
            show_debug_message(string(linenum) + " " + code);
        } else {
            show_debug_message("Missing entry for key: " + string(linenum));
        }
    }

    show_debug_message("==== END OF DUMP ====");
}

// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
 function navigate_history_down() {
	 if (global.justreturned == 1) return; // 🛑 Block history on return
	 
    if (global.history_index != -1) {
        global.history_index++;
        if (global.history_index >= ds_list_size(global.input_history)) {
            global.history_index = -1;
            current_input = "";
        } else {
            current_input = ds_list_find_value(global.input_history, global.history_index);
        }
        cursor_pos = string_length(current_input);
    }
 }
function is_numeric_string(str) {
    if (string_length(str) == 0) return false;

    // Allow negative sign
    if (string_char_at(str, 1) == "-") {
        str = string_copy(str, 2, string_length(str));
        if (string_length(str) == 0) return false; // <- Add this
    }

    var dot_count = 0;
    for (var i = 1; i <= string_length(str); i++) {
        var c = string_char_at(str, i);
        if (c == ".") {
            dot_count++;
            if (dot_count > 1) return false;
        }
        else if (ord(c) < ord("0") || ord(c) > ord("9")) {
            return false;
        }
    }

    return true;
}

function is_function(t) {
    var fn = string_upper(string_trim(t));
    return  fn == "RND"    // your original BASIC call
         || fn == "RND1"   // internal 1-arg postfix token
         || fn == "RND2"   // internal 2-arg postfix token
         || fn == "STR$"
         || fn == "CHR$"
         || fn == "LEFT$"
         || fn == "RIGHT$"
         || fn == "MID$"
         || fn == "ABS"
         || fn == "INT"
         || fn == "EXP"
         || fn == "LOG"
         || fn == "LOG10"
         || fn == "SGN"
         || fn == "SIN"
         || fn == "COS"
         || fn == "TAN"
         || fn == "REPEAT$";
}

// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
function handle_program_line(input_text) {
    var space_pos = string_pos(" ", input_text);
    var line_num = real(string_copy(input_text, 1, space_pos - 1));
    var code_content = string_copy(input_text, space_pos + 1, string_length(input_text));
    
    // If no code content, delete the line
    if (string_trim(code_content) == "") {
        delete_program_line(line_num);
    } else {
        add_or_update_program_line(line_num, code_content);
    }
    
    update_display();
 }
// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
 function insert_line_number_ordered(new_line_num) {
    var size = ds_list_size(global.line_numbers);
    var inserted = false;
    
    for (var i = 0; i < size; i++) {
        if (ds_list_find_value(global.line_numbers, i) > new_line_num) {
            ds_list_insert(global.line_numbers, i, new_line_num);
            inserted = true;
            break;
      }
    }
    
    if (!inserted) {
        ds_list_add(global.line_numbers, new_line_num);
    }
 }
/// Remove single quote comments, unless inside double quotes
function strip_basic_remark(arg) {
    var len = string_length(arg);
    var inside_string = false;

    for (var i = 1; i <= len; i++) {
        var c = string_char_at(arg, i);

        if (c == "\"") {
            inside_string = !inside_string;
        }
        else if (c == "'" && !inside_string) {
            // Found unquoted remark start – strip everything after
            return string_trim(string_copy(arg, 1, i - 1));
        }
    }

    // No unquoted remark found – return original
    return arg;
}

// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
 function add_to_history(input_text) {
    if (input_text != "" && (ds_list_size(global.input_history) == 0 || 
        ds_list_find_value(global.input_history, ds_list_size(global.input_history) - 1) != input_text)) {
        ds_list_add(global.input_history, input_text);
        // Limit history size
        while (ds_list_size(global.input_history) > 50) {
            ds_list_delete(global.input_history, 0);
        }
	}
 }
// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
 function is_line_number(str) {
    // Check if string contains only digits
    if (string_length(str) == 0) return false;
    
    for (var i = 1; i <= string_length(str); i++) {
        var char = string_char_at(str, i);
        if (char < "0" || char > "9") return false;
    }
    
    // Convert to number and validate range
    var line_num = real(str);
    return (line_num >= 1 && line_num <= 65535);
 }
function list_saved_programs() {
    if (!variable_instance_exists(obj_editor, "dir_listing")) return;

    obj_editor.dir_listing = [];
    var fname = file_find_first(working_directory + "*.bas", 0); // 0 = file
    while (fname != "") {
        array_push(obj_editor.dir_listing, fname);
        fname = file_find_next();
    }
    file_find_close();

    obj_editor.showing_dir_overlay = true;

    if (array_length(obj_editor.dir_listing) == 0) {
        array_push(obj_editor.dir_listing, "No .bas files found.");
    }
}

function split_on_unquoted_semicolons(s) {
    var result = [];
    var current = "";
    var in_string = false;
    for (var i = 1; i <= string_length(s); i++) {
        var c = string_char_at(s, i);
        if (c == "\"") in_string = !in_string;
        if (c == ";" && !in_string) {
            array_push(result, string_trim(current));
            current = "";
        } else {
            current += c;
        }
    }
    if (string_length(current) > 0) array_push(result, string_trim(current));
    return result;
}

function basic_cmd_return() {
    if (ds_stack_empty(global.gosub_stack)) {
        show_debug_message("RETURN: ERROR — gosub_stack is empty");
        basic_show_error_message("RETURN called with empty stack.");
        global.interpreter_running = false;
        return;
    }

    var return_index = ds_stack_pop(global.gosub_stack);
    global.interpreter_next_line = return_index;
    show_debug_message("RETURN: Popped return index from gosub_stack: " + string(return_index));
}

/// @function interpreter_cmd_print(argument)
/// @description Handles the BASIC PRINT command.
/// @param arg - The string argument from the BASIC code

function interpreter_cmd_print(arg) {
    // Remove surrounding double quotes if present
    if (string_length(arg) >= 2 &&
        string_char_at(arg, 1) == "\"" &&
        string_char_at(arg, string_length(arg)) == "\"") {
        arg = string_copy(arg, 2, string_length(arg) - 2);
    }

    ds_list_add(output_lines, arg);
}

// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
 function new_program() {
    // Save state for undo before clearing
    if (ds_list_size(global.line_numbers) > 0) {
        save_undo_state();
    }
    
    ds_map_clear(global.program_lines);
    ds_list_clear(global.line_numbers);
    current_filename = "";
    display_start_line = 0;
    update_display();
    basic_show_message("NEW PROGRAM");
 }
// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
function add_or_update_program_line(line_num, code) {
    ds_map_set(global.program_lines, line_num, code);
    
    // Update ordered line numbers list
    var pos = ds_list_find_index(global.line_numbers, line_num);
    if (pos == -1) {
        // Insert in correct order
        insert_line_number_ordered(line_num);
    }
 }
function basic_cmd_cls() {
    show_debug_message("CLS: Called");
    show_debug_message("CLS: Current color before clear: " + string(global.current_draw_color));

    ds_list_clear(global.output_lines);
    ds_list_clear(global.output_colors);

    global.current_draw_color = global.basic_text_color;

    show_debug_message("CLS: Screen cleared");
    show_debug_message("CLS: Current color reset to default: " + string(global.current_draw_color));
}

/// @function is_function_token(token)
/// @description Checks if a given token is a recognized BASIC function.
/// @param {string} token The token to check.
/// @returns {boolean} True if it's a function, false otherwise.
function is_function_token(token) {
    var upper_token = string_upper(token);
    // Add more functions here as you implement them in evaluate_postfix
    return upper_token == "RND" || upper_token == "ABS";
}

/// @param char_index
function mode1_grid_clear(char_index) {
    var grid_cols = 15;
    var grid_rows = 18;

    for (var row = 0; row < grid_rows; row++) {
        for (var col = 0; col < grid_cols; col++) {
            var i = row * grid_cols + col;
            grid[i].char = char_index;
            grid[i].fg = c_white;
            grid[i].bg = c_black;
        }
    }
}

function basic_cmd_pause() {
    show_debug_message("PAUSE: Execution paused. Waiting for user to press ENTER...");

	global.pause_in_effect = true;
    global.awaiting_input = true;
    global.input_target_var = ""; // No variable to store
    global.pause_mode = true;     // Optional flag if you want to treat it differently in draw
	global.input_expected = false;

}

// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
function delete_program_line(line_num) {
    ds_map_delete(global.program_lines, line_num);
    var pos = ds_list_find_index(global.line_numbers, line_num);
    if (pos != -1) {
        ds_list_delete(global.line_numbers, pos);
    }
 }
function basic_parse_color(colstr) {
    colstr = string_upper(string_trim(colstr));

    if (ds_map_exists(global.colors, colstr)) {
        return global.colors[? colstr];
    }

    // Try as direct numeric value
    var val = real(colstr);
    if (!is_nan(val)) {
        return val;
    }

    return c_white; // Fallback
}

// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
function toggle_syntax_highlighting() {
    syntax_highlighting = !syntax_highlighting;
    basic_show_message("SYNTAX HIGHLIGHTING: " + (syntax_highlighting ? "ON" : "OFF"));
    update_display();
 }

// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
 function new_program_without_undo() {
    ds_map_clear(global.program_lines);
    ds_list_clear(global.line_numbers);
    current_filename = "";
    display_start_line = 0;
 }
// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
function save_program() {
    if (current_filename == "") {
        show_error_message("NO FILENAME");
        return;
    }
    save_program_as(current_filename);
 }

/// @param char_index
/// @param fg_color
/// @param bg_color
function mode1_grid_fill(char_index, fg_color, bg_color) {
    for (var i = 0; i < array_length(grid); i++) {
        grid[i].char = char_index;
        grid[i].fg = fg_color;
        grid[i].bg = bg_color;
    }
}

function get_precedence(op) {
switch (op) {
    case "=": case "<>": case "<": case ">": case "<=": case ">=": return 0;
    case "+": case "-": return 1;
    case "*": case "/": case "%": case "MOD": return 2;
    case "^": return 3;
    default: return 0;
}

}

function basic_cmd_end() {
    show_debug_message("END: Program termination requested");
    global.program_has_ended = true;
    global.interpreter_running = false;
	 global.current_mode = 0;
    show_debug_message("END: interpreter_running set to false");
}

// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
 function is_valid_line_number(line_num) {
    return (line_num >= 1 && line_num <= global.config[? "max_line_number"]);
 }

function basic_evaluate_expression_v2(expr) {
    var tokens = basic_tokenize_expression_v2(expr);
    show_debug_message("Tokens: " + string(tokens)); // for debug
    var postfix = infix_to_postfix(tokens);
    return evaluate_postfix(postfix);
}

function is_operator(op) {
    return (op == "+" || op == "-" || op == "*" || op == "/" || op == "^" || 
            op == "%" || string_upper(op) == "MOD" ||
        op == "=" || op == "<>" || op == "<" || op == ">" || op == "<=" || op == ">=");
}
// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
 function show_stat_message(msg) {
    message_text = msg;
    message_timer = 120; // Show for 2 seconds at 60 FPS
 }
// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
 function show_current_colors() {
    basic_show_message("CURRENT SCHEME - USE: COLOR GREEN/BLUE/AMBER");
 }
// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
 function update_display() {
    // This will be called in the Draw event
 }
 
// Script assets have changed for v2.3.0 see
// https://help.yoyogames.com/hc/en-us/articles/360005277377 for more information
 function show_error_message(error) {
    basic_show_message("?" + error);
 }
function is_quoted_string(str) {
    return (string_length(str) >= 2 &&
            string_char_at(str, 1) == "\"" &&
            string_char_at(str, string_length(str)) == "\"");
}

/// @description Insert description here
// You can write your code in this editor
// No active logic yet, but this is where future interactions (like SCROLL or POKE) will go.

// Call this to display a message for roughly 2 seconds (120 frames at 60 fps).
function basic_show_message(msg) {
    message_text  = msg;
    global.message_timer = 120;
}
/// @description Insert description here
// You can write your code in this editor
reset_interpreter_state();
global.current_mode = 0;
show_message(" Unto the abyss I fall");
// obj_globals Step Event
if (room == rm_editor) {
    if (!instance_exists(obj_editor)) {
        instance_create_layer(0, 0, "Instances", obj_editor);
    }
}


// Optional helper for errors: prefix message with a "?" as classic BASIC did.
function basic_show_error_message(err) {
    basic_show_message("?" + err);
}



function resolve_basic_value(key) {
    return ds_map_exists(global.basic_variables, key) ? global.basic_variables[? key] : real(key);
}


/// @description Insert description here
// You can write your code in this editor
ds_list_destroy(interpreter_current_program);
function is_letter(ch) {
    var o = ord(string_upper(ch));
    return (o >= 65 && o <= 90);
}



function is_letter_or_digit(ch) {
    return is_letter(ch) || (ord(ch) >= 48 && ord(ch) <= 57);
}
function basic_cmd_rem() {
    // Do nothing — comment line
}

function is_right_associative(op) {
    return (op == "^");
}

function quit_program()
{
	game_end();
}

